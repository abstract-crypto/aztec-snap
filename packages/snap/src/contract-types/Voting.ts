/* Autogenerated file, do not edit! */

/* eslint-disable */
import {
  AztecAddress,
  AztecAddressLike,
  CompleteAddress,
  Contract,
  ContractArtifact,
  ContractBase,
  ContractFunctionInteraction,
  ContractMethod,
  DeployMethod,
  EthAddress,
  EthAddressLike,
  FieldLike,
  Fr,
  Point,
  PublicKey,
  Wallet,
} from '@aztec/aztec.js';
import VotingContractArtifactJson from './artifacts/Voting.json';
export const VotingContractArtifact =
  VotingContractArtifactJson as ContractArtifact;

/**
 * Type-safe interface for contract Voting;
 */
export class VotingContract extends ContractBase {
  private constructor(
    completeAddress: CompleteAddress,
    wallet: Wallet,
    portalContract = EthAddress.ZERO,
  ) {
    super(completeAddress, VotingContractArtifact, wallet, portalContract);
  }

  /**
   * Creates a contract instance.
   * @param address - The deployed contract's address.
   * @param wallet - The wallet to use when interacting with the contract.
   * @returns A promise that resolves to a new Contract instance.
   */
  public static async at(address: AztecAddress, wallet: Wallet) {
    return Contract.at(
      address,
      VotingContract.artifact,
      wallet,
    ) as Promise<VotingContract>;
  }

  /**
   * Creates a tx to deploy a new instance of this contract.
   */
  public static deploy(wallet: Wallet, admin: AztecAddressLike) {
    return new DeployMethod<VotingContract>(
      Point.ZERO,
      wallet,
      VotingContractArtifact,
      Array.from(arguments).slice(1),
    );
  }

  /**
   * Creates a tx to deploy a new instance of this contract using the specified public key to derive the address.
   */
  public static deployWithPublicKey(
    publicKey: PublicKey,
    wallet: Wallet,
    admin: AztecAddressLike,
  ) {
    return new DeployMethod<VotingContract>(
      publicKey,
      wallet,
      VotingContractArtifact,
      Array.from(arguments).slice(2),
    );
  }

  /**
   * Returns this contract's artifact.
   */
  public static get artifact(): ContractArtifact {
    return VotingContractArtifact;
  }

  /** Type-safe wrappers for the public methods exposed by the contract. */
  public methods!: {
    /** add_to_tally_public(vote: field) */
    add_to_tally_public: ((vote: FieldLike) => ContractFunctionInteraction) &
      Pick<ContractMethod, 'selector'>;

    /** admin() */
    admin: (() => ContractFunctionInteraction) &
      Pick<ContractMethod, 'selector'>;

    /** cast_vote(owner: field, vote: field) */
    cast_vote: ((
      owner: FieldLike,
      vote: FieldLike,
    ) => ContractFunctionInteraction) &
      Pick<ContractMethod, 'selector'>;

    /** compute_note_hash_and_nullifier(contract_address: field, nonce: field, storage_slot: field, preimage: array) */
    compute_note_hash_and_nullifier: ((
      contract_address: FieldLike,
      nonce: FieldLike,
      storage_slot: FieldLike,
      preimage: FieldLike[],
    ) => ContractFunctionInteraction) &
      Pick<ContractMethod, 'selector'>;

    /** end_vote() */
    end_vote: (() => ContractFunctionInteraction) &
      Pick<ContractMethod, 'selector'>;

    /** get_vote(vote: field) */
    get_vote: ((vote: FieldLike) => ContractFunctionInteraction) &
      Pick<ContractMethod, 'selector'>;

    /** set_admin(admin: struct) */
    set_admin: ((admin: AztecAddressLike) => ContractFunctionInteraction) &
      Pick<ContractMethod, 'selector'>;
  };
}

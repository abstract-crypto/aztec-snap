{
  "name": "EcdsaAccount",
  "functions": [
    {
      "name": "compute_note_hash_and_nullifier",
      "functionType": "unconstrained",
      "isInternal": false,
      "parameters": [
        {
          "name": "contract_address",
          "type": {
            "kind": "field"
          },
          "visibility": "private"
        },
        {
          "name": "nonce",
          "type": {
            "kind": "field"
          },
          "visibility": "private"
        },
        {
          "name": "storage_slot",
          "type": {
            "kind": "field"
          },
          "visibility": "private"
        },
        {
          "name": "serialized_note",
          "type": {
            "kind": "array",
            "length": 5,
            "type": {
              "kind": "field"
            }
          },
          "visibility": "private"
        }
      ],
      "returnTypes": [
        {
          "kind": "array",
          "length": 4,
          "type": {
            "kind": "field"
          }
        }
      ],
      "bytecode": "",
      "verificationKey": "0000000200000800000000740000000f00000003515f3109623eb3c25aa5b16a1a79fd558bac7a7ce62c4560a8c537c77ce80dd339128d1d37b6582ee9e6df9567efb64313471dfa18f520f9ce53161b50dbf7731bc5f900000003515f322bc4cce83a486a92c92fd59bd84e0f92595baa639fc2ed86b00ffa0dfded2a092a669a3bdb7a273a015eda494457cc7ed5236f26cee330c290d45a33b9daa94800000003515f332729426c008c085a81bd34d8ef12dd31e80130339ef99d50013a89e4558eee6d0fa4ffe2ee7b7b62eb92608b2251ac31396a718f9b34978888789042b790a30100000003515f342be6b6824a913eb7a57b03cb1ee7bfb4de02f2f65fe8a4e97baa7766ddb353a82a8a25c49dc63778cd9fe96173f12a2bc77f3682f4c4448f98f1df82c75234a100000003515f351f85760d6ab567465aadc2f180af9eae3800e6958fec96aef53fd8a7b195d7c000c6267a0dd5cfc22b3fe804f53e266069c0e36f51885baec1e7e67650c62e170000000c515f41524954484d455449430d9d0f8ece2aa12012fa21e6e5c859e97bd5704e5c122064a66051294bc5e04213f61f54a0ebdf6fee4d4a6ecf693478191de0c2899bcd8e86a636c8d3eff43400000003515f43224a99d02c86336737c8dd5b746c40d2be6aead8393889a76a18d664029096e90f7fe81adcc92a74350eada9622ac453f49ebac24a066a1f83b394df54dfa0130000000c515f46495845445f42415345060e8a013ed289c2f9fd7473b04f6594b138ddb4b4cf6b901622a14088f04b8d2c83ff74fce56e3d5573b99c7b26d85d5046ce0c6559506acb7a675e7713eb3a00000007515f4c4f4749430721a91cb8da4b917e054f72147e1760cfe0ef3d45090ac0f4961d84ec1996961a25e787b26bd8b50b1a99450f77a424a83513c2b33af268cd253b0587ff50c700000003515f4d05dbd8623b8652511e1eb38d38887a69eceb082f807514f09e127237c5213b401b9325b48c6c225968002318095f89d0ef9cf629b2b7f0172e03bc39aacf6ed800000007515f52414e474504b57a3805e41df328f5ca9aefa40fad5917391543b7b65c6476e60b8f72e9ad07c92f3b3e11c8feae96dedc4b14a6226ef3201244f37cfc1ee5b96781f48d2b000000075349474d415f3125001d1954a18571eaa007144c5a567bb0d2be4def08a8be918b8c05e3b27d312c59ed41e09e144eab5de77ca89a2fd783be702a47c951d3112e3de02ce6e47c000000075349474d415f3223994e6a23618e60fa01c449a7ab88378709197e186d48d604bfb6931ffb15ad11c5ec7a0700570f80088fd5198ab5d5c227f2ad2a455a6edeec024156bb7beb000000075349474d415f3300cda5845f23468a13275d18bddae27c6bb189cf9aa95b6a03a0cb6688c7e8d829639b45cf8607c525cc400b55ebf90205f2f378626dc3406cc59b2d1b474fba000000075349474d415f342d299e7928496ea2d37f10b43afd6a80c90a33b483090d18069ffa275eedb2fc2f82121e8de43dc036d99b478b6227ceef34248939987a19011f065d8b5cef5c0000000010000000000000000100000002000000030000000400000005000000060000000700000008000000090000000a0000000b0000000c0000000d0000000e0000000f"
    },
    {
      "name": "constructor",
      "functionType": "secret",
      "isInternal": false,
      "parameters": [
        {
          "name": "signing_pub_key_x",
          "type": {
            "kind": "array",
            "length": 32,
            "type": {
              "kind": "integer",
              "sign": "unsigned",
              "width": 8
            }
          },
          "visibility": "public"
        },
        {
          "name": "signing_pub_key_y",
          "type": {
            "kind": "array",
            "length": 32,
            "type": {
              "kind": "integer",
              "sign": "unsigned",
              "width": 8
            }
          },
          "visibility": "public"
        }
      ],
      "returnTypes": [],
      "bytecode": "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",
      "verificationKey": "0000000200000800000000740000000f00000003515f3109623eb3c25aa5b16a1a79fd558bac7a7ce62c4560a8c537c77ce80dd339128d1d37b6582ee9e6df9567efb64313471dfa18f520f9ce53161b50dbf7731bc5f900000003515f322bc4cce83a486a92c92fd59bd84e0f92595baa639fc2ed86b00ffa0dfded2a092a669a3bdb7a273a015eda494457cc7ed5236f26cee330c290d45a33b9daa94800000003515f332729426c008c085a81bd34d8ef12dd31e80130339ef99d50013a89e4558eee6d0fa4ffe2ee7b7b62eb92608b2251ac31396a718f9b34978888789042b790a30100000003515f342be6b6824a913eb7a57b03cb1ee7bfb4de02f2f65fe8a4e97baa7766ddb353a82a8a25c49dc63778cd9fe96173f12a2bc77f3682f4c4448f98f1df82c75234a100000003515f351f85760d6ab567465aadc2f180af9eae3800e6958fec96aef53fd8a7b195d7c000c6267a0dd5cfc22b3fe804f53e266069c0e36f51885baec1e7e67650c62e170000000c515f41524954484d455449430d9d0f8ece2aa12012fa21e6e5c859e97bd5704e5c122064a66051294bc5e04213f61f54a0ebdf6fee4d4a6ecf693478191de0c2899bcd8e86a636c8d3eff43400000003515f43224a99d02c86336737c8dd5b746c40d2be6aead8393889a76a18d664029096e90f7fe81adcc92a74350eada9622ac453f49ebac24a066a1f83b394df54dfa0130000000c515f46495845445f42415345060e8a013ed289c2f9fd7473b04f6594b138ddb4b4cf6b901622a14088f04b8d2c83ff74fce56e3d5573b99c7b26d85d5046ce0c6559506acb7a675e7713eb3a00000007515f4c4f4749430721a91cb8da4b917e054f72147e1760cfe0ef3d45090ac0f4961d84ec1996961a25e787b26bd8b50b1a99450f77a424a83513c2b33af268cd253b0587ff50c700000003515f4d05dbd8623b8652511e1eb38d38887a69eceb082f807514f09e127237c5213b401b9325b48c6c225968002318095f89d0ef9cf629b2b7f0172e03bc39aacf6ed800000007515f52414e474504b57a3805e41df328f5ca9aefa40fad5917391543b7b65c6476e60b8f72e9ad07c92f3b3e11c8feae96dedc4b14a6226ef3201244f37cfc1ee5b96781f48d2b000000075349474d415f3125001d1954a18571eaa007144c5a567bb0d2be4def08a8be918b8c05e3b27d312c59ed41e09e144eab5de77ca89a2fd783be702a47c951d3112e3de02ce6e47c000000075349474d415f3223994e6a23618e60fa01c449a7ab88378709197e186d48d604bfb6931ffb15ad11c5ec7a0700570f80088fd5198ab5d5c227f2ad2a455a6edeec024156bb7beb000000075349474d415f3300cda5845f23468a13275d18bddae27c6bb189cf9aa95b6a03a0cb6688c7e8d829639b45cf8607c525cc400b55ebf90205f2f378626dc3406cc59b2d1b474fba000000075349474d415f342d299e7928496ea2d37f10b43afd6a80c90a33b483090d18069ffa275eedb2fc2f82121e8de43dc036d99b478b6227ceef34248939987a19011f065d8b5cef5c0000000010000000000000000100000002000000030000000400000005000000060000000700000008000000090000000a0000000b0000000c0000000d0000000e0000000f"
    },
    {
      "name": "entrypoint",
      "functionType": "secret",
      "isInternal": false,
      "parameters": [
        {
          "name": "payload",
          "type": {
            "kind": "struct",
            "path": "authwit::entrypoint::EntrypointPayload",
            "fields": [
              {
                "name": "function_calls",
                "type": {
                  "kind": "array",
                  "length": 4,
                  "type": {
                    "kind": "struct",
                    "path": "authwit::entrypoint::FunctionCall",
                    "fields": [
                      {
                        "name": "args_hash",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "function_selector",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "target_address",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "is_public",
                        "type": {
                          "kind": "boolean"
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "nonce",
                "type": {
                  "kind": "field"
                }
              }
            ]
          },
          "visibility": "public"
        }
      ],
      "returnTypes": [],
      "bytecode": "",
      "verificationKey": "0000000200000800000000740000000f00000003515f3109623eb3c25aa5b16a1a79fd558bac7a7ce62c4560a8c537c77ce80dd339128d1d37b6582ee9e6df9567efb64313471dfa18f520f9ce53161b50dbf7731bc5f900000003515f322bc4cce83a486a92c92fd59bd84e0f92595baa639fc2ed86b00ffa0dfded2a092a669a3bdb7a273a015eda494457cc7ed5236f26cee330c290d45a33b9daa94800000003515f332729426c008c085a81bd34d8ef12dd31e80130339ef99d50013a89e4558eee6d0fa4ffe2ee7b7b62eb92608b2251ac31396a718f9b34978888789042b790a30100000003515f342be6b6824a913eb7a57b03cb1ee7bfb4de02f2f65fe8a4e97baa7766ddb353a82a8a25c49dc63778cd9fe96173f12a2bc77f3682f4c4448f98f1df82c75234a100000003515f351f85760d6ab567465aadc2f180af9eae3800e6958fec96aef53fd8a7b195d7c000c6267a0dd5cfc22b3fe804f53e266069c0e36f51885baec1e7e67650c62e170000000c515f41524954484d455449430d9d0f8ece2aa12012fa21e6e5c859e97bd5704e5c122064a66051294bc5e04213f61f54a0ebdf6fee4d4a6ecf693478191de0c2899bcd8e86a636c8d3eff43400000003515f43224a99d02c86336737c8dd5b746c40d2be6aead8393889a76a18d664029096e90f7fe81adcc92a74350eada9622ac453f49ebac24a066a1f83b394df54dfa0130000000c515f46495845445f42415345060e8a013ed289c2f9fd7473b04f6594b138ddb4b4cf6b901622a14088f04b8d2c83ff74fce56e3d5573b99c7b26d85d5046ce0c6559506acb7a675e7713eb3a00000007515f4c4f4749430721a91cb8da4b917e054f72147e1760cfe0ef3d45090ac0f4961d84ec1996961a25e787b26bd8b50b1a99450f77a424a83513c2b33af268cd253b0587ff50c700000003515f4d05dbd8623b8652511e1eb38d38887a69eceb082f807514f09e127237c5213b401b9325b48c6c225968002318095f89d0ef9cf629b2b7f0172e03bc39aacf6ed800000007515f52414e474504b57a3805e41df328f5ca9aefa40fad5917391543b7b65c6476e60b8f72e9ad07c92f3b3e11c8feae96dedc4b14a6226ef3201244f37cfc1ee5b96781f48d2b000000075349474d415f3125001d1954a18571eaa007144c5a567bb0d2be4def08a8be918b8c05e3b27d312c59ed41e09e144eab5de77ca89a2fd783be702a47c951d3112e3de02ce6e47c000000075349474d415f3223994e6a23618e60fa01c449a7ab88378709197e186d48d604bfb6931ffb15ad11c5ec7a0700570f80088fd5198ab5d5c227f2ad2a455a6edeec024156bb7beb000000075349474d415f3300cda5845f23468a13275d18bddae27c6bb189cf9aa95b6a03a0cb6688c7e8d829639b45cf8607c525cc400b55ebf90205f2f378626dc3406cc59b2d1b474fba000000075349474d415f342d299e7928496ea2d37f10b43afd6a80c90a33b483090d18069ffa275eedb2fc2f82121e8de43dc036d99b478b6227ceef34248939987a19011f065d8b5cef5c0000000010000000000000000100000002000000030000000400000005000000060000000700000008000000090000000a0000000b0000000c0000000d0000000e0000000f"
    },
    {
      "name": "is_valid",
      "functionType": "secret",
      "isInternal": false,
      "parameters": [
        {
          "name": "message_hash",
          "type": {
            "kind": "field"
          },
          "visibility": "private"
        }
      ],
      "returnTypes": [],
      "bytecode": "",
      "verificationKey": "0000000200000800000000740000000f00000003515f3109623eb3c25aa5b16a1a79fd558bac7a7ce62c4560a8c537c77ce80dd339128d1d37b6582ee9e6df9567efb64313471dfa18f520f9ce53161b50dbf7731bc5f900000003515f322bc4cce83a486a92c92fd59bd84e0f92595baa639fc2ed86b00ffa0dfded2a092a669a3bdb7a273a015eda494457cc7ed5236f26cee330c290d45a33b9daa94800000003515f332729426c008c085a81bd34d8ef12dd31e80130339ef99d50013a89e4558eee6d0fa4ffe2ee7b7b62eb92608b2251ac31396a718f9b34978888789042b790a30100000003515f342be6b6824a913eb7a57b03cb1ee7bfb4de02f2f65fe8a4e97baa7766ddb353a82a8a25c49dc63778cd9fe96173f12a2bc77f3682f4c4448f98f1df82c75234a100000003515f351f85760d6ab567465aadc2f180af9eae3800e6958fec96aef53fd8a7b195d7c000c6267a0dd5cfc22b3fe804f53e266069c0e36f51885baec1e7e67650c62e170000000c515f41524954484d455449430d9d0f8ece2aa12012fa21e6e5c859e97bd5704e5c122064a66051294bc5e04213f61f54a0ebdf6fee4d4a6ecf693478191de0c2899bcd8e86a636c8d3eff43400000003515f43224a99d02c86336737c8dd5b746c40d2be6aead8393889a76a18d664029096e90f7fe81adcc92a74350eada9622ac453f49ebac24a066a1f83b394df54dfa0130000000c515f46495845445f42415345060e8a013ed289c2f9fd7473b04f6594b138ddb4b4cf6b901622a14088f04b8d2c83ff74fce56e3d5573b99c7b26d85d5046ce0c6559506acb7a675e7713eb3a00000007515f4c4f4749430721a91cb8da4b917e054f72147e1760cfe0ef3d45090ac0f4961d84ec1996961a25e787b26bd8b50b1a99450f77a424a83513c2b33af268cd253b0587ff50c700000003515f4d05dbd8623b8652511e1eb38d38887a69eceb082f807514f09e127237c5213b401b9325b48c6c225968002318095f89d0ef9cf629b2b7f0172e03bc39aacf6ed800000007515f52414e474504b57a3805e41df328f5ca9aefa40fad5917391543b7b65c6476e60b8f72e9ad07c92f3b3e11c8feae96dedc4b14a6226ef3201244f37cfc1ee5b96781f48d2b000000075349474d415f3125001d1954a18571eaa007144c5a567bb0d2be4def08a8be918b8c05e3b27d312c59ed41e09e144eab5de77ca89a2fd783be702a47c951d3112e3de02ce6e47c000000075349474d415f3223994e6a23618e60fa01c449a7ab88378709197e186d48d604bfb6931ffb15ad11c5ec7a0700570f80088fd5198ab5d5c227f2ad2a455a6edeec024156bb7beb000000075349474d415f3300cda5845f23468a13275d18bddae27c6bb189cf9aa95b6a03a0cb6688c7e8d829639b45cf8607c525cc400b55ebf90205f2f378626dc3406cc59b2d1b474fba000000075349474d415f342d299e7928496ea2d37f10b43afd6a80c90a33b483090d18069ffa275eedb2fc2f82121e8de43dc036d99b478b6227ceef34248939987a19011f065d8b5cef5c0000000010000000000000000100000002000000030000000400000005000000060000000700000008000000090000000a0000000b0000000c0000000d0000000e0000000f"
    },
    {
      "name": "is_valid_public",
      "functionType": "open",
      "isInternal": false,
      "parameters": [
        {
          "name": "message_hash",
          "type": {
            "kind": "field"
          },
          "visibility": "private"
        }
      ],
      "returnTypes": [
        {
          "kind": "struct",
          "path": "aztec::abi::PublicCircuitPublicInputs",
          "fields": [
            {
              "name": "call_context",
              "type": {
                "kind": "struct",
                "path": "aztec::abi::CallContext",
                "fields": [
                  {
                    "name": "msg_sender",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "storage_contract_address",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "portal_contract_address",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "function_selector",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "is_delegate_call",
                    "type": {
                      "kind": "boolean"
                    }
                  },
                  {
                    "name": "is_static_call",
                    "type": {
                      "kind": "boolean"
                    }
                  },
                  {
                    "name": "is_contract_deployment",
                    "type": {
                      "kind": "boolean"
                    }
                  }
                ]
              }
            },
            {
              "name": "args_hash",
              "type": {
                "kind": "field"
              }
            },
            {
              "name": "return_values",
              "type": {
                "kind": "array",
                "length": 4,
                "type": {
                  "kind": "field"
                }
              }
            },
            {
              "name": "contract_storage_update_requests",
              "type": {
                "kind": "array",
                "length": 16,
                "type": {
                  "kind": "struct",
                  "path": "aztec::abi::ContractStorageUpdateRequest",
                  "fields": [
                    {
                      "name": "storage_slot",
                      "type": {
                        "kind": "field"
                      }
                    },
                    {
                      "name": "old_value",
                      "type": {
                        "kind": "field"
                      }
                    },
                    {
                      "name": "new_value",
                      "type": {
                        "kind": "field"
                      }
                    }
                  ]
                }
              }
            },
            {
              "name": "contract_storage_read",
              "type": {
                "kind": "array",
                "length": 16,
                "type": {
                  "kind": "struct",
                  "path": "aztec::abi::ContractStorageRead",
                  "fields": [
                    {
                      "name": "storage_slot",
                      "type": {
                        "kind": "field"
                      }
                    },
                    {
                      "name": "value",
                      "type": {
                        "kind": "field"
                      }
                    }
                  ]
                }
              }
            },
            {
              "name": "public_call_stack",
              "type": {
                "kind": "array",
                "length": 4,
                "type": {
                  "kind": "field"
                }
              }
            },
            {
              "name": "new_commitments",
              "type": {
                "kind": "array",
                "length": 16,
                "type": {
                  "kind": "field"
                }
              }
            },
            {
              "name": "new_nullifiers",
              "type": {
                "kind": "array",
                "length": 16,
                "type": {
                  "kind": "field"
                }
              }
            },
            {
              "name": "new_l2_to_l1_msgs",
              "type": {
                "kind": "array",
                "length": 2,
                "type": {
                  "kind": "field"
                }
              }
            },
            {
              "name": "unencrypted_logs_hash",
              "type": {
                "kind": "array",
                "length": 2,
                "type": {
                  "kind": "field"
                }
              }
            },
            {
              "name": "unencrypted_log_preimages_length",
              "type": {
                "kind": "field"
              }
            },
            {
              "name": "block_header",
              "type": {
                "kind": "struct",
                "path": "aztec::abi::BlockHeader",
                "fields": [
                  {
                    "name": "note_hash_tree_root",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "nullifier_tree_root",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "contract_tree_root",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "l1_to_l2_messages_tree_root",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "archive_root",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "public_data_tree_root",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "global_variables_hash",
                    "type": {
                      "kind": "field"
                    }
                  }
                ]
              }
            },
            {
              "name": "prover_address",
              "type": {
                "kind": "field"
              }
            }
          ]
        }
      ],
      "bytecode": "",
      "verificationKey": "0000000200000800000000740000000f00000003515f3109623eb3c25aa5b16a1a79fd558bac7a7ce62c4560a8c537c77ce80dd339128d1d37b6582ee9e6df9567efb64313471dfa18f520f9ce53161b50dbf7731bc5f900000003515f322bc4cce83a486a92c92fd59bd84e0f92595baa639fc2ed86b00ffa0dfded2a092a669a3bdb7a273a015eda494457cc7ed5236f26cee330c290d45a33b9daa94800000003515f332729426c008c085a81bd34d8ef12dd31e80130339ef99d50013a89e4558eee6d0fa4ffe2ee7b7b62eb92608b2251ac31396a718f9b34978888789042b790a30100000003515f342be6b6824a913eb7a57b03cb1ee7bfb4de02f2f65fe8a4e97baa7766ddb353a82a8a25c49dc63778cd9fe96173f12a2bc77f3682f4c4448f98f1df82c75234a100000003515f351f85760d6ab567465aadc2f180af9eae3800e6958fec96aef53fd8a7b195d7c000c6267a0dd5cfc22b3fe804f53e266069c0e36f51885baec1e7e67650c62e170000000c515f41524954484d455449430d9d0f8ece2aa12012fa21e6e5c859e97bd5704e5c122064a66051294bc5e04213f61f54a0ebdf6fee4d4a6ecf693478191de0c2899bcd8e86a636c8d3eff43400000003515f43224a99d02c86336737c8dd5b746c40d2be6aead8393889a76a18d664029096e90f7fe81adcc92a74350eada9622ac453f49ebac24a066a1f83b394df54dfa0130000000c515f46495845445f42415345060e8a013ed289c2f9fd7473b04f6594b138ddb4b4cf6b901622a14088f04b8d2c83ff74fce56e3d5573b99c7b26d85d5046ce0c6559506acb7a675e7713eb3a00000007515f4c4f4749430721a91cb8da4b917e054f72147e1760cfe0ef3d45090ac0f4961d84ec1996961a25e787b26bd8b50b1a99450f77a424a83513c2b33af268cd253b0587ff50c700000003515f4d05dbd8623b8652511e1eb38d38887a69eceb082f807514f09e127237c5213b401b9325b48c6c225968002318095f89d0ef9cf629b2b7f0172e03bc39aacf6ed800000007515f52414e474504b57a3805e41df328f5ca9aefa40fad5917391543b7b65c6476e60b8f72e9ad07c92f3b3e11c8feae96dedc4b14a6226ef3201244f37cfc1ee5b96781f48d2b000000075349474d415f3125001d1954a18571eaa007144c5a567bb0d2be4def08a8be918b8c05e3b27d312c59ed41e09e144eab5de77ca89a2fd783be702a47c951d3112e3de02ce6e47c000000075349474d415f3223994e6a23618e60fa01c449a7ab88378709197e186d48d604bfb6931ffb15ad11c5ec7a0700570f80088fd5198ab5d5c227f2ad2a455a6edeec024156bb7beb000000075349474d415f3300cda5845f23468a13275d18bddae27c6bb189cf9aa95b6a03a0cb6688c7e8d829639b45cf8607c525cc400b55ebf90205f2f378626dc3406cc59b2d1b474fba000000075349474d415f342d299e7928496ea2d37f10b43afd6a80c90a33b483090d18069ffa275eedb2fc2f82121e8de43dc036d99b478b6227ceef34248939987a19011f065d8b5cef5c0000000010000000000000000100000002000000030000000400000005000000060000000700000008000000090000000a0000000b0000000c0000000d0000000e0000000f"
    },
    {
      "name": "set_is_valid_storage",
      "functionType": "open",
      "isInternal": true,
      "parameters": [
        {
          "name": "message_hash",
          "type": {
            "kind": "field"
          },
          "visibility": "private"
        },
        {
          "name": "value",
          "type": {
            "kind": "boolean"
          },
          "visibility": "private"
        }
      ],
      "returnTypes": [
        {
          "kind": "struct",
          "path": "aztec::abi::PublicCircuitPublicInputs",
          "fields": [
            {
              "name": "call_context",
              "type": {
                "kind": "struct",
                "path": "aztec::abi::CallContext",
                "fields": [
                  {
                    "name": "msg_sender",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "storage_contract_address",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "portal_contract_address",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "function_selector",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "is_delegate_call",
                    "type": {
                      "kind": "boolean"
                    }
                  },
                  {
                    "name": "is_static_call",
                    "type": {
                      "kind": "boolean"
                    }
                  },
                  {
                    "name": "is_contract_deployment",
                    "type": {
                      "kind": "boolean"
                    }
                  }
                ]
              }
            },
            {
              "name": "args_hash",
              "type": {
                "kind": "field"
              }
            },
            {
              "name": "return_values",
              "type": {
                "kind": "array",
                "length": 4,
                "type": {
                  "kind": "field"
                }
              }
            },
            {
              "name": "contract_storage_update_requests",
              "type": {
                "kind": "array",
                "length": 16,
                "type": {
                  "kind": "struct",
                  "path": "aztec::abi::ContractStorageUpdateRequest",
                  "fields": [
                    {
                      "name": "storage_slot",
                      "type": {
                        "kind": "field"
                      }
                    },
                    {
                      "name": "old_value",
                      "type": {
                        "kind": "field"
                      }
                    },
                    {
                      "name": "new_value",
                      "type": {
                        "kind": "field"
                      }
                    }
                  ]
                }
              }
            },
            {
              "name": "contract_storage_read",
              "type": {
                "kind": "array",
                "length": 16,
                "type": {
                  "kind": "struct",
                  "path": "aztec::abi::ContractStorageRead",
                  "fields": [
                    {
                      "name": "storage_slot",
                      "type": {
                        "kind": "field"
                      }
                    },
                    {
                      "name": "value",
                      "type": {
                        "kind": "field"
                      }
                    }
                  ]
                }
              }
            },
            {
              "name": "public_call_stack",
              "type": {
                "kind": "array",
                "length": 4,
                "type": {
                  "kind": "field"
                }
              }
            },
            {
              "name": "new_commitments",
              "type": {
                "kind": "array",
                "length": 16,
                "type": {
                  "kind": "field"
                }
              }
            },
            {
              "name": "new_nullifiers",
              "type": {
                "kind": "array",
                "length": 16,
                "type": {
                  "kind": "field"
                }
              }
            },
            {
              "name": "new_l2_to_l1_msgs",
              "type": {
                "kind": "array",
                "length": 2,
                "type": {
                  "kind": "field"
                }
              }
            },
            {
              "name": "unencrypted_logs_hash",
              "type": {
                "kind": "array",
                "length": 2,
                "type": {
                  "kind": "field"
                }
              }
            },
            {
              "name": "unencrypted_log_preimages_length",
              "type": {
                "kind": "field"
              }
            },
            {
              "name": "block_header",
              "type": {
                "kind": "struct",
                "path": "aztec::abi::BlockHeader",
                "fields": [
                  {
                    "name": "note_hash_tree_root",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "nullifier_tree_root",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "contract_tree_root",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "l1_to_l2_messages_tree_root",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "archive_root",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "public_data_tree_root",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "global_variables_hash",
                    "type": {
                      "kind": "field"
                    }
                  }
                ]
              }
            },
            {
              "name": "prover_address",
              "type": {
                "kind": "field"
              }
            }
          ]
        }
      ],
      "bytecode": "",
      "verificationKey": "0000000200000800000000740000000f00000003515f3109623eb3c25aa5b16a1a79fd558bac7a7ce62c4560a8c537c77ce80dd339128d1d37b6582ee9e6df9567efb64313471dfa18f520f9ce53161b50dbf7731bc5f900000003515f322bc4cce83a486a92c92fd59bd84e0f92595baa639fc2ed86b00ffa0dfded2a092a669a3bdb7a273a015eda494457cc7ed5236f26cee330c290d45a33b9daa94800000003515f332729426c008c085a81bd34d8ef12dd31e80130339ef99d50013a89e4558eee6d0fa4ffe2ee7b7b62eb92608b2251ac31396a718f9b34978888789042b790a30100000003515f342be6b6824a913eb7a57b03cb1ee7bfb4de02f2f65fe8a4e97baa7766ddb353a82a8a25c49dc63778cd9fe96173f12a2bc77f3682f4c4448f98f1df82c75234a100000003515f351f85760d6ab567465aadc2f180af9eae3800e6958fec96aef53fd8a7b195d7c000c6267a0dd5cfc22b3fe804f53e266069c0e36f51885baec1e7e67650c62e170000000c515f41524954484d455449430d9d0f8ece2aa12012fa21e6e5c859e97bd5704e5c122064a66051294bc5e04213f61f54a0ebdf6fee4d4a6ecf693478191de0c2899bcd8e86a636c8d3eff43400000003515f43224a99d02c86336737c8dd5b746c40d2be6aead8393889a76a18d664029096e90f7fe81adcc92a74350eada9622ac453f49ebac24a066a1f83b394df54dfa0130000000c515f46495845445f42415345060e8a013ed289c2f9fd7473b04f6594b138ddb4b4cf6b901622a14088f04b8d2c83ff74fce56e3d5573b99c7b26d85d5046ce0c6559506acb7a675e7713eb3a00000007515f4c4f4749430721a91cb8da4b917e054f72147e1760cfe0ef3d45090ac0f4961d84ec1996961a25e787b26bd8b50b1a99450f77a424a83513c2b33af268cd253b0587ff50c700000003515f4d05dbd8623b8652511e1eb38d38887a69eceb082f807514f09e127237c5213b401b9325b48c6c225968002318095f89d0ef9cf629b2b7f0172e03bc39aacf6ed800000007515f52414e474504b57a3805e41df328f5ca9aefa40fad5917391543b7b65c6476e60b8f72e9ad07c92f3b3e11c8feae96dedc4b14a6226ef3201244f37cfc1ee5b96781f48d2b000000075349474d415f3125001d1954a18571eaa007144c5a567bb0d2be4def08a8be918b8c05e3b27d312c59ed41e09e144eab5de77ca89a2fd783be702a47c951d3112e3de02ce6e47c000000075349474d415f3223994e6a23618e60fa01c449a7ab88378709197e186d48d604bfb6931ffb15ad11c5ec7a0700570f80088fd5198ab5d5c227f2ad2a455a6edeec024156bb7beb000000075349474d415f3300cda5845f23468a13275d18bddae27c6bb189cf9aa95b6a03a0cb6688c7e8d829639b45cf8607c525cc400b55ebf90205f2f378626dc3406cc59b2d1b474fba000000075349474d415f342d299e7928496ea2d37f10b43afd6a80c90a33b483090d18069ffa275eedb2fc2f82121e8de43dc036d99b478b6227ceef34248939987a19011f065d8b5cef5c0000000010000000000000000100000002000000030000000400000005000000060000000700000008000000090000000a0000000b0000000c0000000d0000000e0000000f"
    },
    {
      "name": "signing_public_key",
      "functionType": "unconstrained",
      "isInternal": false,
      "parameters": [],
      "returnTypes": [
        {
          "kind": "array",
          "length": 64,
          "type": {
            "kind": "integer",
            "sign": "unsigned",
            "width": 8
          }
        }
      ],
      "bytecode": "",
      "verificationKey": "0000000200000800000000740000000f00000003515f3109623eb3c25aa5b16a1a79fd558bac7a7ce62c4560a8c537c77ce80dd339128d1d37b6582ee9e6df9567efb64313471dfa18f520f9ce53161b50dbf7731bc5f900000003515f322bc4cce83a486a92c92fd59bd84e0f92595baa639fc2ed86b00ffa0dfded2a092a669a3bdb7a273a015eda494457cc7ed5236f26cee330c290d45a33b9daa94800000003515f332729426c008c085a81bd34d8ef12dd31e80130339ef99d50013a89e4558eee6d0fa4ffe2ee7b7b62eb92608b2251ac31396a718f9b34978888789042b790a30100000003515f342be6b6824a913eb7a57b03cb1ee7bfb4de02f2f65fe8a4e97baa7766ddb353a82a8a25c49dc63778cd9fe96173f12a2bc77f3682f4c4448f98f1df82c75234a100000003515f351f85760d6ab567465aadc2f180af9eae3800e6958fec96aef53fd8a7b195d7c000c6267a0dd5cfc22b3fe804f53e266069c0e36f51885baec1e7e67650c62e170000000c515f41524954484d455449430d9d0f8ece2aa12012fa21e6e5c859e97bd5704e5c122064a66051294bc5e04213f61f54a0ebdf6fee4d4a6ecf693478191de0c2899bcd8e86a636c8d3eff43400000003515f43224a99d02c86336737c8dd5b746c40d2be6aead8393889a76a18d664029096e90f7fe81adcc92a74350eada9622ac453f49ebac24a066a1f83b394df54dfa0130000000c515f46495845445f42415345060e8a013ed289c2f9fd7473b04f6594b138ddb4b4cf6b901622a14088f04b8d2c83ff74fce56e3d5573b99c7b26d85d5046ce0c6559506acb7a675e7713eb3a00000007515f4c4f4749430721a91cb8da4b917e054f72147e1760cfe0ef3d45090ac0f4961d84ec1996961a25e787b26bd8b50b1a99450f77a424a83513c2b33af268cd253b0587ff50c700000003515f4d05dbd8623b8652511e1eb38d38887a69eceb082f807514f09e127237c5213b401b9325b48c6c225968002318095f89d0ef9cf629b2b7f0172e03bc39aacf6ed800000007515f52414e474504b57a3805e41df328f5ca9aefa40fad5917391543b7b65c6476e60b8f72e9ad07c92f3b3e11c8feae96dedc4b14a6226ef3201244f37cfc1ee5b96781f48d2b000000075349474d415f3125001d1954a18571eaa007144c5a567bb0d2be4def08a8be918b8c05e3b27d312c59ed41e09e144eab5de77ca89a2fd783be702a47c951d3112e3de02ce6e47c000000075349474d415f3223994e6a23618e60fa01c449a7ab88378709197e186d48d604bfb6931ffb15ad11c5ec7a0700570f80088fd5198ab5d5c227f2ad2a455a6edeec024156bb7beb000000075349474d415f3300cda5845f23468a13275d18bddae27c6bb189cf9aa95b6a03a0cb6688c7e8d829639b45cf8607c525cc400b55ebf90205f2f378626dc3406cc59b2d1b474fba000000075349474d415f342d299e7928496ea2d37f10b43afd6a80c90a33b483090d18069ffa275eedb2fc2f82121e8de43dc036d99b478b6227ceef34248939987a19011f065d8b5cef5c0000000010000000000000000100000002000000030000000400000005000000060000000700000008000000090000000a0000000b0000000c0000000d0000000e0000000f"
    }
  ],
  "events": [],
  "debug": {
    "debugSymbols": [
      "eJztnd2O7Lpxhd9lXxuB+E+eVwlyYSQOYMBwgth3xnn3aAOjnhkfyuw5qq76RuSVDwzNaFVx9+ISp7/SP3785X/+849///P//PVvP375x4/t31z68cu//+PH3/73j3/9+X/87e9//L+///hl+8OPP/31v/b//fUPP/77z3/5049f3K9/+M1VPsbk3q7c/zunx9UtdS53pRwXb++/OMRf/+MPP4VkipBCEVIpQhpEiN8oQhxFiKcICRQhkSKE4qye4qye4qye4qye4qyB4qyB4qyB4qyB4qyB4qyB4qyB4qyB4qyB4qyB4qyR4qyR4qyR4qyR4qyR4qyR4qyR4qyR4qyR4qyR4qyJ4qyJ4qyJ4qyJ4qyJ4qyJ4qyJ4qyJ4qyJ4qyJ4qyZ4qyZ4qyZ4qyZ4qyZ4qyZ4qyZ4qyZ4qyZ4qyZ4qyF4qyF4qyF4qyF4qyF4qyF4qyF4qyF4qyF4qyF4qyV4qyV4qyV4qyV4qyV4qyV4qyV4qyV4qyV4qyV4qyN4qyN4qyN4qyN4qyN4qyN4qyN4qyN4qyN4qyN4qxuo1ir2yje6jaKubqN4q5uo9ir2yj+6jaKwbqN4rBuo1is2zAe6zAe6zAe6zAe6zAe6zAey2GyOFAWh8riYFkYLsthwCyHIbMcBs1yGDbLYeAsh6GzHAbPchg+y2EALYchtBwG0XIYRsthIC2HobQcBtNyGE7LYUAthyG1HAbVchhWy2FgLYehtRwG13IYXsthgC2HIbYcBtlyGGbLYaAth6G2HAbbchhuy2HALYchtxwG3XIYdsth4C2HobccBt9yGH7LYQAuhyG4HAbhchiGy2EgLoehuBwG43IYjsthQC6HIbkcBuVyGJbLYWAuh6G5HAbnchiey2GALochuhwG6XIYpsthoC6HobocButyGK7LYcAuhyG7HAbtchi2y2HgLoehuxwG73IYvsthAC+HIbwcBvFyGMbLYSAvh6G8HAbzchjOy2M4L4/hvDyG8/IYzstvFI/1GM7LYzgvj+G8PIbz8hjOy2M4L4/hvDyG8/IYzstjOC+P4bw8hvPyGM7LYzgvj+G8PIbz8hjOy2M4L4/hvDyG8/IYzstjOC+P4bw8hvPyGM7LYzgvj+G8PIbz8hjOy2M4L4/hvDyG8/IYzstjOC+P4bw8hvPyGM7LYzgvj+G8PIbz8hjOy2M4L4/hvDyG8/IYzstjOC+P4bw8hvPyGM7LYzgvj+G8PIbz8hjOy2M4L4/hvDyG8/IYzstjOC+P4bw8hvPyGM7LYzgvj+G8PIbz8hjOy2M4L4/hvDyG8/IYzstjOC+P4bw8hvPyGM7LYzgvj+G8PIbz8hjOy2M4L4/hvDyG8/IYzstjOC+P4bw8hvPyGM7LYzgvj+G8PIbz8hjOy2M4L4/hvDyG8/IYzstjOC+P4bwChvMKGM4rYDivgOG8wkbx2IDhvAKG8woYzitgOK+A4bwChvMKGM4rYDivgOG8AobzChjOK2A4r4DhvAKG8woYzitgOK+A4bwChvMKGM4rYDivgOG8AobzChjOK2A4r4DhvAKG8woYzitgOK+A4bwChvMKGM4rYDivgOG8AobzChjOK2A4r4DhvAKG8woYzitgOK+A4bwChvMKGM4rYDivgOG8AobzChjOK2A4r4DhvAKG8woYzitgOK+A4bwChvMKGM4rYDivgOG8AobzChjOK2A4r4DhvAKG8woYzitgOK+A4bwChvMKGM4rYDivgOG8AobzChjOK2A4r4DhvAKG8woYzitgOK+A4bwChvMKGM4rYDivgOG8AobzChjOK2A4r4DhvAKG8woYzitgOK+A4bwChvMKGM4rYDivgOG8AobzChjOK2I4r4jhvCKG84oYzituFI+NGM4rYjiviOG8IobzihjOK2I4r4jhvCKG84oYzitiOK+I4bwihvOKGM4rYjiviOG8IobzihjOK2I4r4jhvCKG84oYzitiOK+I4bwihvOKGM4rYjiviOG8IobzihjOK2I4r4jhvCKG84oYzitiOK+I4bwihvOKGM4rYjiviOG8IobzihjOK2I4r4jhvCKG84oYzitiOK+I4bwihvOKGM4rYjiviOG8IobzihjOK2I4r4jhvCKG84oYzitiOK+I4bwihvOKGM4rYjiviOG8IobzihjOK2I4r4jhvCKG84oYzitiOK+I4bwihvOKGM4rYjiviOG8IobzihjOK2I4r4jhvCKG84oYzitiOK+I4bwihvOKGM4rYjiviOG8IobzihjOK2I4r4jhvCKG84oYzitiOK+I4bwShvNKGM4rYTivhOG80kbx2IThvBKG80oYzithOK+E4bwShvNKGM4rYTivhOG8EobzShjOK2E4r4ThvBKG80oYzithOK+E4bwShvNKGM4rYTivhOG8EobzShjOK2E4r4ThvBKG80oYzithOK+E4bwShvNKGM4rYTivhOG8EobzShjOK2E4r4ThvBKG80oYzithOK+E4bwShvNKGM4rYTivhOG8EobzShjOK2E4r4ThvBKG80oYzithOK+E4bwShvNKGM4rYTivhOG8EobzShjOK2E4r4ThvBKG80oYzithOK+E4bwShvNKGM4rYTivhOG8EobzShjOK2E4r4ThvBKG80oYzithOK+E4bwShvNKGM4rYTivhOG8EobzShjOK2E4r4ThvBKG80oYzithOK+E4bwShvNKGM4rYTivhOG8EobzShjOK2M4r4zhvDKG88oYzitvFI/NGM4rYzivjOG8MobzyhjOK2M4r4zhvDKG88oYzitjOK+M4bwyhvPKGM4rYzivjOG8MobzyhjOK2M4r4zhvDKG88oYzitjOK+M4bwyhvPKGM4rYzivjOG8MobzyhjOK2M4r4zhvDKG88oYzitjOK+M4bwyhvPKGM4rYzivjOG8MobzyhjOK2M4r4zhvDKG88oYzitjOK+M4bwyhvPKGM4rYzivjOG8MobzyhjOK2M4r4zhvDKG88oYzitjOK+M4bwyhvPKGM4rYzivjOG8MobzyhjOK2M4r4zhvDKG88oYzitjOK+M4bwyhvPKGM4rYzivjOG8MobzyhjOK2M4r4zhvDKG88oYzitjOK+M4bwyhvPKGM4rYzivjOG8MobzyhjOK2M4r4zhvDKG88oYzitjOK+M4bwKhvMqGM6rYDivguG8ykbx2ILhvAqG8yoYzqtgOK+C4bwKhvMqGM6rYDivguG8CobzKhjOq2A4r4LhvAqG8yoYzqtgOK+C4bwKhvMqGM6rYDivguG8CobzKhjOq2A4r4LhvAqG8yoYzqtgOK+C4bwKhvMqGM6rYDivguG8CobzKhjOq2A4r4LhvAqG8yoYzqtgOK+C4bwKhvMqGM6rYDivguG8CobzKhjOq2A4r4LhvAqG8yoYzqtgOK+C4bwKhvMqGM6rYDivcpHzqvWhJG3+mpJrHiup5JrHSiq55rGSSq55rKSSax4rqeSax0oqueaxkkqueaygkoucl6QSjMde5LwklWA89iLnJakE47EXOS9JJRiPvch5SSrBeOxFzktSCcZjL3JekkowHnuR85JUgvHYi5yXpBKMx17kvCSVYDz2IuclqQTjsRc5L0kl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AoclCxyWLHBYssBhyQKHJQsclixwWLLAYckChyULHJYscFiywGHJAoclCxyWLHBYssBhyQKHJQsclixwWLLAYckChyULHJYscFiywGHJAoclCxyWLHBYssBhyQKHJQsclixwWLLAYckChyULHJYscFiywGHJAoclCxyWLHBYssBhyQKHJQsclixwWLLAYckChyULHJYscFiywGHJAoclCxyWLHBYssBhyQKHJQsclixwWLLAYckChyULHJYscFiywGHJAoclCxyWLHBYssBhyQKHJQsclixwWLLAYckChyULHJYscFiywGHJIoclixyWLHJYsshhyeKGcdvIYckihyWLHJYscliyyGHJIoclixyWLHJYsshhySKHJYsclixyWLLIYckihyWLHJYscliyyGHJIoclixyWLHJYsshhySKHJYsclixyWLLIYckihyWLHJYscliyyGHJIoclixyWLHJYsshhySKHJYsclixyWLLIYckihyWLHJYscliyyGHJIoclixyWLHJYsshhySKHJYsclixyWLLIYckihyWLHJYscliyyGHJIoclixyWLHJYsshhySKHJYsclixyWLLIYckihyWLHJYscliyyGHJIoclixyWLHJYsshhySKHJYsclixyWLLIYckihyWLHJYscliyyGHJIoclixyWLHJYsshhySKHJYsclixyWLLIYckihyWLHJYscliyyGHJIoclixyWLHJYsshhySKHJYsclixxWLLEYckShyVLHJYsbRi3TRyWLHFYssRhyRKHJUsclixxWLLEYckShyVLHJYscViyxGHJEoclSxyWLHFYssRhyRKHJUsclixxWLLEYckShyVLHJYscViyxGHJEoclSxyWLHFYssRhyRKHJUsclixxWLLEYckShyVLHJYs9VmymEp8+7GYmvsg6PixrjMOf6zPaI1/rOs44x/rukPM/uh0zCV2fqz7SR7/WPdTF3N9iCw1/8ulDaGkt2v3//xwrUuPm3Q/T9I36X5SvnaT8OEm5dNNOlfX2o6rm/NdSd1PjK2k/ifHVFL/U2kpqc8J2Urqu4mppBOnspR04oKWkgQcVlqSgB9LS+K5d58vspXEc+8+b2Qqqc8d2UriuXefQ7KVxHPvPpdkK4nn3n1OyVYSz7373JKtJJ579zkmW0k89+5zTbaSeO7d55xsJfHcu8892Uri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",
      "",
      "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UuXulCp3p1S5O6XK3SlV7k6pcndKlbtTqtydUuXulCp3p1S5O6XK3SlV7k6pcndKlbtTqtydUuXulCp3p1S5O6XK3SlV7k6pcndKlbtTqtydUuXulCp3p1S5O6XK3SlV7k6pcndKlbtTqtydUuXulCp3p1S5O6XK3SlV7k6pcndKlbtTqtydUuXulCp3p1S5O6XK3SlV7k6pcndKlbtTqtydUuXulCp3p1S5O6XK3SlV7k6pcndKlbtTqtydUuXulCp3p1S5O6XK3SlV7i5T5e4yVe4uU+XuMlXuLm9MXpypcneZKneXqXJ3mSp3l6lyd5kqd5epcneZKneXqXJ3mSp3l6lyd5kqd5epcneZKneXqXJ3mSp3l6lyd5kqd5epcneZKneXqXJ3mSp3l6lyd5kqd5epcneZKneXqXJ3mSp3l6lyd5kqd5epcneZKneXqXJ3mSp3l6lyd5kqd5epcneZKneXqXJ3mSp3l6lyd5kqd5epcneZKneXqXJ3mSp3l6lyd5kqd5epcneZKneXqXJ3mSp3l6lyd5kqd5epcneZKneXqXJ3mSp3l6lyd5kqd5epcneZKneXqXJ3mSp3l6lyd5kqd5epcneZKneXqXJ3mSp3l6lyd5kqd5epcneZKneXqXJ3mSp3l6lyd5kqd5epcneZKneXqXJ3mSp3l6lyd5kqd5epcneZKneXqXJ3mSp3l6lyd5kqd5epcneZKneXqXJ3mSp3l6lyd4Uqd1eocneFKndXqHJ3ZWPy4kKVuytUubtClbsrVLm7QpW7K1S5u0KVuytUubtClbsrVLm7QpW7K1S5u0KVuytUubtClbsrVLm7QpW7K1S5u0KVuytUubtClbsrVLm7QpW7K1S5u0KVuytUubtClbsrVLm7QpW7K1S5u0KVuytUubtClbsrVLm7QpW7K1S5u0KVuytUubtClbsrVLm7QpW7K1S5u0KVuytUubtClbsrVLm7QpW7K1S5u0KVuytUubtClbsrVLm7QpW7K1S5u0KVuytUubtClbsrVLm7QpW7K1S5u0KVuytUubtClbsrVLm7QpW7K1S5u0KVuytUubtClbsrVLm7QpW7K1S5u0KVuytUubtClbsrVLm7QpW7K1S5u0KVuytUubtClbsrVLm7QpW7K1S5u0KVuytUubtClbsrVLm7QpW7K1S5u0KVuytUubtClbsr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le1LXNm+xJXtS1zZvsSV7Utc2b7Ele1LXNm+xJXtS1zZvsSV7Utc2b7Ele1LXNm+xJXtS1zZvsSV7Utc2b7Ele1LXNk+4cr2CVe2T7iyfcKV7ZONypWFK9snXNk+4cr2CVe2T7iyfcKV7ROubJ9wZfuEK9snXNk+4cr2CVe2T7iyfcKV7ROubJ9wZfuEK9snXNk+4cr2CVe2T7iyfcKV7ROubJ9wZfuEK9snXNk+4cr2CVe2T7iyfcKV7ROubJ9wZfuEK9snXNk+4cr2CVe2T7iyfcKV7ROubJ9wZfuEK9snXNk+4cr2CVe2T7iyfcKV7ROubJ9wZfuEK9snXNk+4cr2CVe2T7iyfcKV7ROubJ9wZfuEK9snXNk+4cr2CVe2T7iyfcKV7ROubJ9wZfuEK9snXNk+4cr2CVe2T7iyfcKV7ROubJ9wZfuEK9snXNk+4cr2CVe2T7iyfcKV7ROubJ9wZfuEK9snXNk+4cr2CVe2T7iyfcKV7ROubJ9wZfuEK9snXNk+4cr2CVe2T7iyfcKV7ROubJ9yZfuUK9unXNk+5cr26UblysqV7VOubJ9yZfuUK9unXNk+5cr2KVe2T7myfcqV7VOubJ9yZfuUK9unXNk+5cr2KVe2T7myfcqV7VOubJ9yZfuUK9unXNk+5cr2KVe2T7myfcqV7VOubJ9yZfuUK9unXNk+5cr2KVe2T7myfcqV7VOubJ9yZfuUK9unXNk+5cr2KVe2T7myfcqV7VOubJ9yZfuUK9unXNk+5cr2KVe2T7myfcqV7VOubJ9yZfuUK9unXNk+5cr2KVe2T7myfcqV7VOubJ9yZfuUK9unXNk+5cr2KVe2T7myfcqV7VOubJ9yZfuUK9unXNk+5cr2KVe2T7myfcqV7VOubJ9yZfuUK9unXNk+5cr2KVe2T7myfcqV7VOubJ9yZfuUK9unXNk+5cr2KVe2T7myfcqV7VOubJ9yZfuUK9unXNk+5cr2KVe2L3Nl+zJXti9zZfsyV7Yvb1SunLmyfZkr25e5sn2ZK9uXubJ9mSvbl7myfZkr25e5sn2ZK9uXubJ9mSvbl7myfZkr25e5sn2ZK9uXubJ9mSvbl7myfZkr25e5sn2ZK9uXubJ9mSvbl7myfZkr25e5sn2ZK9uXubJ9mSvbl7myfZkr25e5sn2ZK9uXubJ9mSvbl7myfZkr25e5sn2Z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UJ+CmSrRHqp9CmaqRHuo9imYqRLtodqnYKZKtIdqn4KZKtEeqn0KZqqEe6hPwUyVcA/1KZipEu6hPgUzVcI91Kdgpkq4h/poy1QJ91AfQpkq4R7qT2uaKuEe6k9rmirhHupPa5oq4R7qT2uaKuEe6k9rmirhHupPa5oq4R7qT2uaKuEe6k9rmirhHupPa5oq4R7qc2pTJdxDfU5tqoR7qM+pTZVwD/U5takS7qE+pzZVwj3U59SmSriH+pzaVAn3UJ9TmyrhHupzalMl3EMwp64wp64wp64wp64wp64wp64wp64wp64wp64wp64wp64wp64wp64wp64wp64wp64wp64wp64wp64wp64wp64wp64wp64wp64wp64wp64wp64wp64wp64wp64wp64wp64wp64wp64wp64wp64wp64wp64wp64wp64wp64wp24wp24wp24wp24wp24wp24wp24wp24wp24wp24wp24wp24wp24wp24wp24wp24wp24wp24wp24wp24wp24wp24wp24wp24wp24wp24wp24wp24wp24wp24wp24wp24wp24wp24wp24wp24wp24wp24wp24wp24wp24wp24wp24wp24wp24wp24wp24wp24wp24wp24wp24wp24wp24wp24wp24wp24wp24wp24wp24wp24wp24wp24wp24wp24wp24wp24wp24wp24wp24wp24DTp2lPSu1disHnNpS2e8hS2W/hz5W5tyv7PeQpbLfQ7nqs7JJv7LfQ5bKfg9ZKvs9VI7nde5S+pX9HjJUDpixpbJ/Py2V/cyM1kfHq7atX9nPzFgq+5kZS2U/d2Wp7OeuDJUDOrnr0xP23H/KBnTSUtnvvo+V5ehVHgNSeMgjjyRHaf3KfvdZKvvdd2x5Wtl3E0tl302O9qjUbdN+Zf9+Wir7Hb9lfVaOVtvveEtlv+M33V+Vg07od7yhcpDr/li5d/v2GOS6LZX9pKE8u0/PPaZf2U8aWiq7PWSq7LtmOvZX5c899PvQsMF7jkEK3F+n35/+Ov1u9tfp9767ziA87q/Tf678dfpPob9O/5n11+k/4f46QX4wOHnWXyfIDwan2vrrBPnB4MRcf50gPxicxuuvE+QHg5N+/XWC/GBwirC/TpAfDE4o9tcJ8oPBuS/+OkF+MDhTxl8nyA8G59X46wT5weAsHH+d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yYKHJQselix4WLLgYcmChyULHpYseFiy4GHJgoclCx6WLHhYsuBhyYKHJQselix4WLLgYcmChyULHpYseFiy4GHJgoclCx6WLHhYsuBhyYKHJQselix4WLLgYcmChyULHpYseFiy4GHJgoclCx6WLHhYsuBhyYKHJQselix4WLLgYcmChyULHpYseFiy4GHJgoclCx6WLHhYsuBhyYKHJQselix4WLLgYcmChyULHpYseFiy4GHJgoclCx6WLHhYsuBhyYKHJQselix4WLLgYcmChyULHpYseFiy4GHJgoclCx6WLHhYsuBhyYKHJQselix4WLLgYcmChyULHpYseFiy4GHJgoclCx6WLHhYsuBhyYKHJQselqzzsGSdhyXrPCxZ52HJ+o1m2nYelqzzsGSdhyXrPCxZ52HJOg9L1nlYss7DknUelqzzsGR9zpLV+vXPrOWvBipePvIUt684pdmG+NMJrRN/OtV14k83gU786faQiT/n6XTiT7eUTvzpZtOJP92GOvGnG1QnvvbWnXOIOvG1t+6cd9SJr71151ylTnztrTvnN3Xia2/dOSeqE1976855VJ342lt3zr3qxNfeunO+Vie+9tadc7w68bW37pwX1omvvXXnXLJOfO2tO+efdeJrb905Z60TX3vrznlunfjaW3fOjevE1966cz5dJ7721p1z8DrxtbfunLfXia+9dedcv0587a079wfoxNfeunNPgU587a079yHoxNfeunPvgk587a079zvoxNfeunOPhE587a0791XoxNfeunMvhk587a0792/oxNfeunPPh0587a0794noxNfeunNviU587a0796PoxNfeunMPi0587a07973oxNfeunOvjE587a0799foxNfeunNPjk586a2bcx+PTnzprZtz749OfOmtmzfprZtzJ5FOfOmtm3P3kU586a2bc8eSTPy5l0knvvbWnfufdOJrb925Z0onvvbW1XZTpbabKrXdVKntpkptN1Vqu6lS202V2m6q1HZTpbabKrXdVKntpkptN1Vqu6lS202V2m6q1HZTpbabKrXdVKntpkptN1Vqu6lS202V2m6q1HZTpbabKrXdVKntpkptN1Vqu6lS202V2m6q1HZTpbabKrXdVKntpkptN1Vqu6lS202V2m6q1HZTpbabKrXdVKntpkptN1Vqu6lS202V2m6q1HZTpbabKrXdVKntpkptN1Vqu6lS202V2m6q1HZTpbabKrXdVKntpkptN1Vqu6lS202V2m6q1HZTpbabKrXdVKntpkptN1Vqu6lS202V2m6q1HZTpbabKrXdVKntpkptN1Vqu6lS202V2m6q1HZTpbabKrXdVKntphrabqqh7aYa2m6qoe2mGjfprTu03VRD2001tN1UQ9tNNbTdVEPbTTW03VRD2001tN1UQ9tNNbTdVEPbTTW03VRD2001tN1UQ9tNNbTdVEPbTTW03VRD2001tN1UQ9tNNbTdVEPbTTW03VRD2001tN1UQ9tNNbTdVEPbTTW03VRD2001tN1UQ9tNNbTdVEPbTTW03VRD2001tN1UQ9tNNbTdVEPbTTW03VRD2001tN1UQ9tNNbTdVEPbTTW03VRD2001tN1UQ9tNNbTdVEPbTTW03VRD2001tN1UQ9tNNbTdVEPbTTW03VRD2001tN1UQ9tNNbTdVEPbTTW03VRD2001tN1UQ9tNNbTdVEPbTTW03VRD2001tN1UQ9tNNbTdVEPbTTW03VRD2001tN1UQ9tNNbTdVEPbTTW03VRD2001tN1UQ9tNNbTdVEPbTTW03VRD2001tN1UQ9tNNaTdVMffKW/d4++Ut+7xd8pb9/g75a17/J3y1j3+TnnrHn+nvHWPv1PeusffKW/d4++0t660m+qIr711pd1UR3ztrSvtpjria29daTfVEV9760q7qY742ltX2k11xNfeutJuqiO+9taVdlMd8bW3rrSb6oivvXWl3VRHfO2tK+2mOuJrb11pN9URX3vrSrupjvjaW1faTXXE19660m6qI7721pV2Ux3xtbeutJvqiK+9daXdVEd87a0r7aY64mtvXWk31RFfe+tKu6mO+NpbV9pNdcTX3rrSbqojvvbWlXZTHfG1t660m+qIr711pd1UR3ztrSvtpjria29daTfVEV9760q7qY742ltX2k11xNfeutJuqiO+9taVdlMd8bW3rrSb6oivvXWl3VRHfO2tK+2mOuJrb11pN9URX3vrSrupjvjaW1faTXXE19660m6qI7721pV2Ux3xtbeutJvqiK+9daXdVEd87a0r7aY64mtvXWk31RFfe+tKu6mO+NJbt2i7qYq2m6pou6mKtpuq3KS3btF2UxVtN1XRdlMVbTdV0XZTFW03VdF2UxVtN1XRdlMVbTdV0XZTFW03VdF2UxVtN1XRdlMVbTdV0XZTFW03VdF2UxVtN1XRdlMVbTdV0XZTFW03VdF2UxVtN1XRdlMVbTdV0XZTFW03VdF2UxVtN1XRdlMVbTdV0XZTFW03VdF2UxVtN1XRdlMVbTdV0XZTFW03VdF2UxVtN1XRdlMVbTdV0XZTFW03VdF2UxVtN1XRdlMVbTdV0XZTFW03VdF2UxVtN1XRdlMVbTdV0XZTFW03VdF2UxVtN1XRdlMVbTdV0XZTFW03VdF2UxVtN1XRdlMVbTdV0XZTFW03VdF2UxVtN1XRdlMVbTdV0XZTFW03VdF2UxVtN1XRdlMVbTdV0XZTFW03VdF2UxVtN1XRdlMVbTdV0XZTFW03VdF2UxVtN1XRdlMVbTdV0XZTVW03VdV2U1VtN1XVdlPVm/TWrdpuqqrtpqrabqqq7aaq2m6qqu2mqtpuqqrtpqrabqqq7aaq2m6qqu2mqtpuqqrtpqrabqqq7aaq2m6qqu2mqtpuqqrtpqrabqqq7aaq2m6qqu2mqtpuqqrtpqrabqqq7aaq2m6qqu2mqtpuqqrtpqrabqqq7aaq2m6qqu2mqtpuqqrtpqrabqqq7aaq2m6qqu2mqtpuqqrtpqrabqqq7aaq2m6qqu2mqtpuqqrtpqrabqqq7aaq2m6qqu2mqtpuqqrtpqrabqqq7aaq2m6qqu2mqtpuqqrtpqrabqqq7aaq2m6qqu2mqtpuqqrtpqrabqqq7aaq2m6qqu2mqtpuqqrtpqrabqqq7aaq2m6qqu2mqtpuqqrtpqrabqqq7aaq2m6qqu2mqtpuqqrtpqrabqqq7aaq2m6qqu2mqtpuqqrtpqrabqqq7aaq2m4q03ZTmbabyrTdVKbtprKb9NY1bTeVabupTNtNZdpuKtN2U5m2m8q03VSm7aYybTeVabupTNtNZdpuKtN2U5m2m8q03VSm7aYybTeVabupTNtNZdpuKtN2U5m2m8q03VSm7aYybTeVabupTNtNZdpuKtN2U5m2m8q03VSm7aYybTeVabupTNtNZdpuKtN2U5m2m8q03VSm7aYybTeVabupTNtNZdpuKtN2U5m2m8q03VSm7aYybTeVabupTNtNZdpuKtN2U5m2m8q03VSm7aYybTeVabupTNtNZdpuKtN2U5m2m8q03VSm7aYybTeVabupTNtNZdpuKtN2U5m2m8q03VSm7aYybTeVabupTNtNZdpuKtN2U5m2m8q03VSm7aYybTeVabupTNtNZdpuKtN2U5m2m8q03VSm7aYybTeVabupTNtNZdpuKtN2U5m2m8q03VSu7aZybTeVa7upXNtN5TfprevabirXdlO5tpvKtd1Uru2mcm03lWu7qVzbTeXabirXdlO5tpvKtd1Uru2mcm03lWu7qVzbTeXabirXdlO5tpvKtd1Uru2mcm03lWu7qVzbTeXabirXdlO5tpvKtd1Uru2mcm03lWu7qVzbTeXabirXdlO5tpvKtd1Uru2mcm03lWu7qVzbTeXabirXdlO5tpvKtd1Uru2mcm03lWu7qVzbTeXabirXdlO5tpvKtd1Uru2mcm03lWu7qVzbTeXabirXdlO5tpvKtd1Uru2mcm03lWu7qVzbTeXabirXdlO5tpvKtd1Uru2mcm03lWu7qVzbTeXabirXdlO5tpvKtd1Uru2mcm03lWu7qVzbTeXabirXdlO5tpvKtd1Uru2mcm03lWu7qfyBm8oiP/9/3Nqvxq/F6sfZEuNJ/GztfjhHfJ21MTk7PrOXW/0Kcfy7j/DznSsSfr5xRcLP961I+Pm2FQk/37Ui4eebViT8fM9KhG8PXFQi4ec7ViS88IZtDyxUIuGFN2x7YKASCS+8YdsD+5RIeOEN2x6Ypy4LP3r5CpRP0uf4SDFae/a/in28cPq31/Xbxzt9IKn6//hON+/uN77TzYv+je90813BG9/p5luIN77Tzfcbb3yn596c9HgSqNT4OF3M7J8i/etpa34/bONbCquf8c+9Pdke/9wblO3xz71F2R3/gaZLJv65NxPb4597h7A9/rlrf3v8c3f59vjnLujt8bW37gNNl0x87a37QNOlEv+BpksmvvbWfaDpkomvvXUfaLpk4mtv3QeaLpn42lv3gaZLJr721n2g6ZKJr711H2i6ZOJrb90Hmi6Z+Npb94GmSya+9tZ9oOmSia+9dR9oumTia2/dB5oumfjaW/eBpksmvvbWfaDpkomvvXUfaLpk4mtv3QeaLpn42lv3gaZLJr721n2g6ZKJr711H2i6ZOJrb90Hmi6Z+Npb94GmSya+9tZ9oOmSia+9dR9oumTia2/dB5oumfjaW/eBpksmvvbWfaDpkomvvXUfaLpk4mtv3QeaLpn42lv3gaZLJr721n2g6ZKJr711H2i6ZOJrb92TNV3b42tv3ZNVXdvja2/dk3Vd2+Nrb92TlV3b40tv3ThZ27U9vvTWjZPVXdvjS2/duElv3ThZ4LU9vvTWjZMlXtvjS2/dOFnktTv+yXau7fG1t+7JHq3t8bW37snGq+3xtbeutpsqtN1Uoe2mCm03VWi7qULbTRXabqrQdlOFtpsqtN1Uoe2mCm03VWi7qULbTRXabqrQdlOFtpsqtN1Uoe2mCm03VWi7qULbTRXabqrQdlOFtpsqtN1Uoe2mCm03VWi7qULbTRXabqrQdlOFtpsqtN1Uoe2mCm03VWi7qULbTRXabqrQdlOFtpsqtN1Uoe2mCm03VWi7qULbTRXabqrQdlOFtpsqtN1Uoe2mCm03VWi7qULbTRXabqrQdlOFtpsquN1Ufvv4Da9eb/8Uf/LK/SNyyf7tdfPzrVJv6HPfKvU2P/etUm/+3/hWv39Wv71V6ruEU9/qyf6Vp7+jOlu7H87x7X+W6a+oHr1/hL/VrxDHv/sIf+512hz+3Hu5zeHPvZPbG/5k78rm8OfexW0Of+493Obw597BbQ5/7j3Z5vDn3mVtDq+8YU82rWwOr7xhT7asbA3fT3asbA4vvGH7yX6VzeE3b9jRy1egfJI+x0eK0dqz/1Xs44XTv73u8Z9zH+908zp+4zvdvLvf+E43L/o3vtPNdwVvfKebbyHe+E4332+8752erKJhfqfS3/h0bWtN17bWdG1rTde21nRta03XttZ0bWtN17bWdG1rTde21nRta03XttZ0bWtN17bWdG1rTde21nRta03XttZ0bWtN17bWdG1rTde21nRta03XttZ0bWtN17bWdG1rTde21nRta03XttZ0bWtN17bWdG1rTde21nRta03XttZ0bWtN17bWdG1rTde21nRta03XttZ0bWtN17bWdG1rTde21nRta03XttZ0bWtN17bWdG1rTde21nRta03XttZ0bWtN17bWdG1rTde21nRta03XttZ0bWtN57bWPI+vvXW57TLP42tvXW4LzPP42lu3a2/d1N66qb11U3vrpvbWTe2tm9pb92Sj1/b42lv3ZKvX9vjaW/dks9f2+Npb92S71/b42lv3ZMPX9vjaW/dky9f2+Npb92TT1/b40ls3T7Z9bY8vvXXzZOPX9vjSWzdv0ls3T7ZzbY8vvXXzZI/W9vjSWzdPNl7tjn+yxmp7fO2tq+2mSm03VWq7qVLbTZXabqrUdlOltpsqtd1Uqe2mSm03VWq7qVLbTZXabqrUdlOltpsqtd1Uqe2mSm03VWq7qVLbTZXabqrUdlOltpsqtd1Uqe2mSm03VWq7qVLbTZXabqrUdlOltpsqtd1Uqe2mSm03VWq7qVLbTZXabqrUdlOltpsqtd1Uqe2mSm03VWq7qVLbTZXabqrUdlOltpsqtd1Uqe2mSm03VWq7qVLbTZXabqrUdlOltpsqtd1Uqe2mSm03VWq7qVLbTZXabqrUdlOltpsqtd1Uqe2mSm03VWq7qVLbTZXabqrUdlOltpsqtd1Uqe2mSm03VXK7qfxW7oe93v4p/uSV+0fkkv3b6+bnW6Xe0Oe+Veptfu5bpd78v/Gtfv+sfr1VbpfWuW91elVv9390+9U32Ua/n4vy7aTH/cXH3I5y1otP74XOevHpncpZLz69jzjrxadb/qwXn+7gs158uiHPevHpTjrrxadb4KwXv/ITOjcpnPXiV35C5xaCs178yk/onOA/68Wv/ITO6fezXvzKT+icHD/rxa/8hM6p67Ne/MpP6JxYPuvFr/yEzmnfs178yk/onJQ968Wv+4Ram4OCay9e3CI+7nPdMj9Pj+nttvfin8d7ad+Pf8R54Yf3ijgv/LhfEeeFD8gVcV74SF0R54UPIR6n2VecPmZxXvjYXhHnhVV8RZwXlvcFcebg2fvibJ3Kz+Nsncrj63ja7IM+B73eF2fn3Mn+LU7vszg7585CnJ1zZyHOzrnzPM4cvXlfnJ1zZyHOzrmzEGfn3FmIs/NucCHOzrvBhThcU3mOirwvDtdUnqMcb4szRzPeF4drKs/RiffF4ZrKc7ThfXG4pvIcPXhfHK6pPEcD3heHayrPH91/XxyuqTx/tP59cbim8vzR9/fF4ZrK80fT3xeHayrPHx1/XxyuqTx/tPt9cbim8vzR6/fF4ZrK80ej3xeHayrPH11+XxyuqTx/BPh9cbim8vxR2vfF4ZrK818b+744XFN5/mtd3xeHayrPf+3q++JwTeX5r0V9XxyqqRyvPJh/RRyqqRyvPPx/RRyqqRw3qqkcryAJV8ShmsrxCvZwRRyqqRyvoBUXxHkFxrgiDtdUfgX4uCIO11R+BSq5Ig7XVH4FXLkiDtdUfgWOuSIO11R+BcC5Ig7XVH4F8rkiDtdUfgUkuiIO11R+BVa6Ig7XVJ7/2r33xeGayvNfi/e+OFxTeSu9thCHaypvpdcW4nBN5a302kIcrqm8lV5biMM1lbfSawtxuKbyVnptIQ7XVJ7/2rH3xeGaylxsX3CxfcHF9gUX2xdcbF9wsX3BxfYFF9sXXGxfcLF9wcX2BRfbF1xsX3CxfcHF9gUX2xdcbF9wsX3BxfYFF9sXXGxfcLF9wcX2BRfbF1xsX3CxfcHF9gUX2xdcbF9wsX3BxfYFF9sXXGxfcLF9wcX2BRfbF1xsX3CxfcHF9gUX2xdcbF9wsX2xFRcbn78y4vhz81mcnR/0hTgbf5RbKePjeCvffu/Ftzgbf5RX4mz8UV6Js/EGYyXOxhuM53H6RiAqbXwIhI8/fv1qmB6fYfZNnYUwG2dOq6V8XqgaT46P/qEUL7f6zYf6FX3jjcjZ0TfetJwdfedWODn6zg1ycvSd2+ZXon/E2Tnen8fZSVatxNl4W7kSh2TEf8QhGdsfcUhG8UecnePVyu0zjpUyi7NzZC7E2TkGF+LsvOleiLNzKj+Ps5OsWomzcyovxNk5lRfi7JzKC3F2TuWFOFxTeSdZtRKHayrvJKtW4nBN5Z1k1Uocrqm8k6xaicM1lXeSVStxuKbyTrJqJQ7XVN5JVq3E4ZrKO8mqlThcU3knWbUSh2sq7ySrVuJwTeWdZNVKnJ1P3ozPb39Ku02/GNvKDi3E2fqF/PM4W7+Qfx5n55M3C3E2zp2VODufvPnnOJOnJ/pWdmghzs4nbxbi7HweciHO+6byLM5Odqjd/OvpiVvOdtZOdmglzs77nYU4O+93FuLsvN9ZiLPzv0IX4uz8r9CFOFsfk6pfc6f4bIXupGNW4uycOwtxdv5X6EKcnf8VuhBn51ReiLP14dXncbY+vPo8ztaHV5/H2frw6vM4XFN5Jx2zEodrKu+kY1bicE3lnXTMShyuqbyTjll4Sn0nHbMShwop6Dt/89VCnJ2/+Wolztap/DzO1qn8PM7Wqfw8ztap/DwOFejVuUCvzgV6dS7Qq3OBXrnzN1+txKGayrkV9lqIQzWV80Y1lXMraLUQh2oq51YgaiEO1VTOrXzW8zhb+ayFOFxTeSuftRCHaypv5bMW4nBN5a1A1EIcrjE4R37q7QO2rf717Xux+vnPph/I5/9s+sF5/s+mP+DP/9n0B/H5P5uu8V/5Z7/88n9GNrOO",
      "",
      ""
    ],
    "fileMap": {
      "1": {
        "source": "mod ecdsa_public_key_note;\n\n// Account contract that uses ECDSA signatures for authentication on the same curve as Ethereum.\n// The signing key is stored in an immutable private note and should be different from the signing key.\ncontract EcdsaAccount {\n    use dep::std;\n    use dep::std::option::Option;\n    use dep::aztec::{\n        abi::CallContext,\n        context::{PrivateContext, PublicContext, Context},\n        note::{\n            note_header::NoteHeader,\n            utils as note_utils,\n        },\n        oracle::get_public_key::get_public_key,\n        state_vars::immutable_singleton::ImmutableSingleton,\n    };\n    use dep::authwit:: {\n        entrypoint::{ EntrypointPayload, ENTRYPOINT_PAYLOAD_SIZE },\n        account::AccountActions,\n        auth_witness::get_auth_witness,\n    };\n\n    use crate::ecdsa_public_key_note::{\n        EcdsaPublicKeyNote, EcdsaPublicKeyNoteInterface, ECDSA_PUBLIC_KEY_NOTE_LEN,\n    };\n\n    struct Storage {\n        public_key: ImmutableSingleton<EcdsaPublicKeyNote, ECDSA_PUBLIC_KEY_NOTE_LEN>,\n    }\n\n    impl Storage {\n        fn init(context: Context) -> pub Self {\n            Storage {\n                public_key: ImmutableSingleton::new(context, 1, EcdsaPublicKeyNoteInterface),\n            }\n        }\n    }\n\n    global ACCOUNT_ACTIONS_STORAGE_SLOT = 2;\n\n    // Creates a new account out of an ECDSA public key to use for signature verification\n    #[aztec(private)]\n    fn constructor(signing_pub_key_x: pub [u8;32], signing_pub_key_y: pub [u8;32]) {\n        let this = context.this_address();\n        let mut pub_key_note = EcdsaPublicKeyNote::new(signing_pub_key_x, signing_pub_key_y, this);\n        storage.public_key.initialize(&mut pub_key_note, Option::none(), true);\n    }\n\n    #[aztec(private)]\n    fn entrypoint(payload: pub EntrypointPayload) {\n        let actions = AccountActions::private(&mut context, ACCOUNT_ACTIONS_STORAGE_SLOT, is_valid_impl);\n        actions.entrypoint(payload);\n    }\n\n    #[aztec(private)]\n    fn is_valid(message_hash: Field) -> Field {\n        let actions = AccountActions::private(&mut context, ACCOUNT_ACTIONS_STORAGE_SLOT, is_valid_impl);\n        actions.is_valid(message_hash)\n    }\n\n    #[aztec(public)]\n    fn is_valid_public(message_hash: Field) -> Field {\n        let actions = AccountActions::public(&mut context, ACCOUNT_ACTIONS_STORAGE_SLOT, is_valid_impl);\n        actions.is_valid_public(message_hash)\n    }\n\n    #[aztec(public)]\n    internal fn set_is_valid_storage(message_hash: Field, value: bool) {\n        let actions = AccountActions::public(&mut context, ACCOUNT_ACTIONS_STORAGE_SLOT, is_valid_impl);\n        actions.internal_set_is_valid_storage(message_hash, value)\n    }\n\n    #[contract_library_method]\n    fn is_valid_impl(context: &mut PrivateContext, message_field: Field) -> pub bool {\n        // Load public key from storage\n        let storage = Storage::init(Context::private(context));\n        let public_key = storage.public_key.get_note();\n\n        // Load auth witness\n        let witness: [Field; 64] = get_auth_witness(message_field);\n        let mut signature: [u8; 64] = [0; 64];\n        for i in 0..64 {\n            signature[i] = witness[i] as u8;\n        }\n\n        // Verify payload signature using Ethereum's signing scheme\n        // Note that noir expects the hash of the message/challenge as input to the ECDSA verification.\n        let hashed_message: [u8; 32] = std::hash::sha256(message_field.to_be_bytes(32));\n        let verification = std::ecdsa_secp256k1::verify_signature(public_key.x, public_key.y, signature, hashed_message);\n        assert(verification == true);\n\n        true\n    }\n\n    // unable to view like this as note is private state innit?\n    unconstrained fn signing_public_key() -> [u8;64] {\n        let mut pubkeys : [u8; 64] = [0; 64];\n        let public_key = storage.public_key.get_note();\n        let x : [u8; 32] = public_key.x;\n        let y : [u8; 32] = public_key.y;\n\n        for i in 0..32 {\n            pubkeys[i] = x[i] as u8;\n            pubkeys[i + 32] = y[i] as u8;\n        }\n        \n        pubkeys\n    }\n\n    // Computes note hash and nullifier.\n    // Note 1: Needs to be defined by every contract producing logs.\n    // Note 2: Having it in all the contracts gives us the ability to compute the note hash and nullifier differently for different kind of notes.\n    unconstrained fn compute_note_hash_and_nullifier(\n        contract_address: Field,\n        nonce: Field,\n        storage_slot: Field,\n        serialized_note: [Field; ECDSA_PUBLIC_KEY_NOTE_LEN]\n    ) -> [Field; 4] {\n        assert(storage_slot == 1);\n        let note_header = NoteHeader::new(contract_address, nonce, storage_slot);\n        note_utils::compute_note_hash_and_nullifier(EcdsaPublicKeyNoteInterface, note_header, serialized_note)\n    }\n}\n",
        "path": "/Users/jack-sw/Codes/istanbul/dogecoin-snap/packages/snap/contract/ecdsa_account/src/main.nr"
      },
      "18": {
        "source": "struct GrumpkinScalar {\n    low: Field,\n    high: Field,\n}\n\nimpl GrumpkinScalar {\n    pub fn new(low: Field, high: Field) -> Self {\n        // TODO: check that the low and high value fit within the grumpkin modulus\n        GrumpkinScalar { low, high }\n    }\n}\n\nglobal GRUMPKIN_SCALAR_SERIALIZED_LEN: Field = 2;\n\npub fn deserialize_grumpkin_scalar(fields: [Field; GRUMPKIN_SCALAR_SERIALIZED_LEN]) -> GrumpkinScalar {\n    GrumpkinScalar { low: fields[0], high: fields[1] }\n}\n\npub fn serialize_grumpkin_scalar(scalar: GrumpkinScalar) -> [Field; GRUMPKIN_SCALAR_SERIALIZED_LEN] {\n    [scalar.low, scalar.high]\n}\n",
        "path": "std/grumpkin_scalar.nr"
      },
      "19": {
        "source": "use crate::grumpkin_scalar::GrumpkinScalar;\nuse crate::scalar_mul::fixed_base_embedded_curve;\n\npub fn grumpkin_fixed_base(scalar: GrumpkinScalar) -> [Field; 2] {\n    // TODO: this should use both the low and high limbs to do the scalar multiplication\n    fixed_base_embedded_curve(scalar.low, scalar.high)\n}\n",
        "path": "std/grumpkin_scalar_mul.nr"
      },
      "23": {
        "source": "impl Field {\n    pub fn to_le_bits(self: Self, bit_size: u32) -> [u1] {\n        crate::assert_constant(bit_size);\n        self.__to_le_bits(bit_size)\n    }\n    \n    pub fn to_be_bits(self: Self, bit_size: u32) -> [u1] {\n        crate::assert_constant(bit_size);\n        self.__to_be_bits(bit_size)\n    }\n\n    #[builtin(to_le_bits)]\n    fn __to_le_bits(_self: Self, _bit_size: u32) -> [u1] {}\n    \n    #[builtin(to_be_bits)]\n    fn __to_be_bits(_self: Self, _bit_size: u32) -> [u1] {}\n\n    pub fn to_le_bytes(self: Self, byte_size: u32) -> [u8] {\n        self.to_le_radix(256, byte_size)\n    }\n\n    pub fn to_be_bytes(self: Self, byte_size: u32) -> [u8] {\n        self.to_be_radix(256, byte_size)\n    }\n\n\n    pub fn to_le_radix(self: Self, radix: u32, result_len: u32) -> [u8] {\n        crate::assert_constant(radix);\n        crate::assert_constant(result_len);\n        self.__to_le_radix(radix, result_len)\n    }\n\n    pub fn to_be_radix(self: Self, radix: u32, result_len: u32) -> [u8] {\n        crate::assert_constant(radix);\n        crate::assert_constant(result_len);\n        self.__to_be_radix(radix, result_len)\n    }\n\n\n\n    // decompose `_self` into a `_result_len` vector over the `_radix` basis\n    // `_radix` must be less than 256\n    #[builtin(to_le_radix)]\n    fn __to_le_radix(_self: Self, _radix: u32, _result_len: u32) -> [u8] {}\n    \n    #[builtin(to_be_radix)]\n    fn __to_be_radix(_self: Self, _radix: u32, _result_len: u32) -> [u8] {}\n\n\n    // Returns self to the power of the given exponent value.\n    // Caution: we assume the exponent fits into 32 bits\n    // using a bigger bit size impacts negatively the performance and should be done only if the exponent does not fit in 32 bits\n    pub fn pow_32(self, exponent: Field) -> Field {\n        let mut r: Field = 1;\n        let b = exponent.to_le_bits(32);\n\n        for i in 1..33 {\n            r *= r;\n            r = (b[32-i] as Field) * (r * self) + (1 - b[32-i] as Field) * r;\n        }\n        r\n    }\n\n    // Parity of (prime) Field element, i.e. sgn0(x mod p) = 0 if x ∈ {0, ..., p-1} is even, otherwise sgn0(x mod p) = 1.\n    pub fn sgn0(self) -> u1 {\n        self as u1\n    }\n}\n\n#[builtin(modulus_num_bits)]\npub fn modulus_num_bits() -> Field {}\n\n#[builtin(modulus_be_bits)]\npub fn modulus_be_bits() -> [u1] {}\n\n#[builtin(modulus_le_bits)]\npub fn modulus_le_bits() -> [u1] {}\n\n#[builtin(modulus_be_bytes)]\npub fn modulus_be_bytes() -> [u8] {}\n\n#[builtin(modulus_le_bytes)]\npub fn modulus_le_bytes() -> [u8] {}\n// Convert a 32 byte array to a field element\npub fn bytes32_to_field(bytes32: [u8; 32]) -> Field {\n    // Convert it to a field element\n    let mut v = 1;\n    let mut high = 0 as Field;\n    let mut low = 0 as Field;\n\n    for i in 0..16 {\n        high = high + (bytes32[15 - i] as Field) * v;\n        low = low + (bytes32[16 + 15 - i] as Field) * v;\n        v = v * 256;\n    }\n    // Abuse that a % p + b % p = (a + b) % p and that low < p\n    low + high * v\n}\n",
        "path": "std/field.nr"
      },
      "34": {
        "source": "struct Option<T> {\n    _is_some: bool,\n    _value: T,\n}\n\nimpl<T> Option<T> {\n    /// Constructs a None value\n    pub fn none() -> Self {\n        Self { _is_some: false, _value: crate::unsafe::zeroed() }\n    }\n\n    /// Constructs a Some wrapper around the given value\n    pub fn some(_value: T) -> Self {\n        Self { _is_some: true, _value }\n    }\n\n    /// True if this Option is None\n    pub fn is_none(self) -> bool {\n        !self._is_some\n    }\n\n    /// True if this Option is Some\n    pub fn is_some(self) -> bool {\n        self._is_some\n    }\n\n    /// Asserts `self.is_some()` and returns the wrapped value.\n    pub fn unwrap(self) -> T {\n        assert(self._is_some);\n        self._value\n    }\n\n    /// Returns the inner value without asserting `self.is_some()`\n    /// Note that if `self` is `None`, there is no guarantee what value will be returned,\n    /// only that it will be of type `T`.\n    pub fn unwrap_unchecked(self) -> T {\n        self._value\n    }\n\n    /// Returns the wrapped value if `self.is_some()`. Otherwise, returns the given default value.\n    pub fn unwrap_or(self, default: T) -> T {\n        if self._is_some {\n            self._value\n        } else {\n            default\n        }\n    }\n\n    /// Returns the wrapped value if `self.is_some()`. Otherwise, calls the given function to return\n    /// a default value.\n    pub fn unwrap_or_else<Env>(self, default: fn[Env]() -> T) -> T {\n        if self._is_some {\n            self._value\n        } else {\n            default()\n        }\n    }\n\n    /// If self is `Some(x)`, this returns `Some(f(x))`. Otherwise, this returns `None`.\n    pub fn map<U, Env>(self, f: fn[Env](T) -> U) -> Option<U> {\n        if self._is_some {\n            Option::some(f(self._value))\n        } else {\n            Option::none()\n        }\n    }\n\n    /// If self is `Some(x)`, this returns `f(x)`. Otherwise, this returns the given default value.\n    pub fn map_or<U, Env>(self, default: U, f: fn[Env](T) -> U) -> U {\n        if self._is_some {\n            f(self._value)\n        } else {\n            default\n        }\n    }\n\n    /// If self is `Some(x)`, this returns `f(x)`. Otherwise, this returns `default()`.\n    pub fn map_or_else<U, Env1, Env2>(self, default: fn[Env1]() -> U, f: fn[Env2](T) -> U) -> U {\n        if self._is_some {\n            f(self._value)\n        } else {\n            default()\n        }\n    }\n\n    /// Returns None if self is None. Otherwise, this returns `other`.\n    pub fn and(self, other: Self) -> Self {\n        if self.is_none() {\n            Option::none()\n        } else {\n            other\n        }\n    }\n\n    /// If self is None, this returns None. Otherwise, this calls the given function\n    /// with the Some value contained within self, and returns the result of that call.\n    ///\n    /// In some languages this function is called `flat_map` or `bind`.\n    pub fn and_then<U, Env>(self, f: fn[Env](T) -> Option<U>) -> Option<U> {\n        if self._is_some {\n            f(self._value)\n        } else {\n            Option::none()\n        }\n    }\n\n    /// If self is Some, return self. Otherwise, return `other`.\n    pub fn or(self, other: Self) -> Self {\n        if self._is_some {\n            self\n        } else {\n            other\n        }\n    }\n\n    /// If self is Some, return self. Otherwise, return `default()`.\n    pub fn or_else<U, Env>(self, default: fn[Env]() -> Self) -> Self {\n        if self._is_some {\n            self\n        } else {\n            default()\n        }\n    }\n\n    // If only one of the two Options is Some, return that option.\n    // Otherwise, if both options are Some or both are None, None is returned.\n    pub fn xor(self, other: Self) -> Self {\n        if self._is_some {\n            if other._is_some {\n                Option::none()\n            } else {\n                self\n            }\n        } else if other._is_some {\n            other\n        } else {\n            Option::none()\n        }\n    }\n\n    /// Returns `Some(x)` if self is `Some(x)` and `predicate(x)` is true.\n    /// Otherwise, this returns `None`\n    pub fn filter<Env>(self, predicate: fn[Env](T) -> bool) -> Self {\n        if self._is_some {\n            if predicate(self._value) {\n                self\n            } else {\n                Option::none()\n            }\n        } else {\n            Option::none()\n        }\n    }\n\n    /// Flattens an Option<Option<T>> into a Option<T>.\n    /// This returns None if the outer Option is None. Otherwise, this returns the inner Option.\n    pub fn flatten(option: Option<Option<T>>) -> Option<T> {\n        if option._is_some {\n            option._value\n        } else {\n            Option::none()\n        }\n    }\n}\n",
        "path": "std/option.nr"
      },
      "76": {
        "source": "global ARGS_LENGTH: Field = 16;\nglobal RETURN_VALUES_LENGTH: Field = 4;\n\n/**\n * Convention for constant array lengths are mainly divided in 2 classes:\n *  - FUNCTION CALL\n *  - TRANSACTION\n *\n * Agreed convention is to use MAX_XXX_PER_CALL resp. MAX_XXX_PER_TX, where XXX denotes a type of element such as\n * commitment, or nullifier, e.g.,:\n *  - MAX_NEW_NULLIFIERS_PER_CALL\n *  - MAX_NEW_COMMITMENTS_PER_TX\n *\n * In the kernel circuits, we accumulate elements such as commitments and the nullifiers from all functions calls in a\n * transaction. Therefore, we always must have:\n * MAX_XXX_PER_TX ≥ MAX_XXX_PER_CALL\n *\n * For instance:\n * MAX_NEW_COMMITMENTS_PER_TX ≥ MAX_NEW_COMMITMENTS_PER_CALL\n * MAX_NEW_NULLIFIERS_PER_TX ≥ MAX_NEW_NULLIFIERS_PER_CALL\n *\n */\n\n// docs:start:constants\n// \"PER CALL\" CONSTANTS\nglobal MAX_NEW_COMMITMENTS_PER_CALL: Field = 16;\nglobal MAX_NEW_NULLIFIERS_PER_CALL: Field = 16;\nglobal MAX_PRIVATE_CALL_STACK_LENGTH_PER_CALL: Field = 4;\nglobal MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL: Field = 4;\nglobal MAX_NEW_L2_TO_L1_MSGS_PER_CALL: Field = 2;\nglobal MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_CALL: Field = 16;\nglobal MAX_PUBLIC_DATA_READS_PER_CALL: Field = 16;\nglobal MAX_READ_REQUESTS_PER_CALL: Field = 32;\nglobal MAX_PENDING_READ_REQUESTS_PER_CALL: Field = 32;\n\n// \"PER TRANSACTION\" CONSTANTS\nglobal MAX_NEW_COMMITMENTS_PER_TX: Field = 64;\nglobal MAX_NEW_NULLIFIERS_PER_TX: Field = 64;\nglobal MAX_PRIVATE_CALL_STACK_LENGTH_PER_TX: Field = 8;\nglobal MAX_PUBLIC_CALL_STACK_LENGTH_PER_TX: Field = 8;\nglobal MAX_NEW_L2_TO_L1_MSGS_PER_TX: Field = 2;\nglobal MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_TX: Field = 16;\nglobal MAX_PUBLIC_DATA_READS_PER_TX: Field = 16;\nglobal MAX_NEW_CONTRACTS_PER_TX: Field = 1;\nglobal MAX_OPTIONALLY_REVEALED_DATA_LENGTH_PER_TX: Field = 4;\nglobal MAX_READ_REQUESTS_PER_TX: Field = 128;\nglobal MAX_PENDING_READ_REQUESTS_PER_TX: Field = 128;\nglobal NUM_ENCRYPTED_LOGS_HASHES_PER_TX: Field = 1;\nglobal NUM_UNENCRYPTED_LOGS_HASHES_PER_TX: Field = 1;\n// docs:end:constants\n\n// ROLLUP CONTRACT CONSTANTS - constants used only in l1-contracts\nglobal NUMBER_OF_L1_L2_MESSAGES_PER_ROLLUP: Field = 16;\n// TODO(961): Use this constant everywhere instead of hard-coded \"2\".\nglobal KERNELS_PER_BASE_ROLLUP: Field = 2;\nglobal MAX_NEW_NULLIFIERS_PER_BASE_ROLLUP: Field = 128;\nglobal MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_BASE_ROLLUP: Field = 32;\nglobal MAX_PUBLIC_DATA_READS_PER_BASE_ROLLUP: Field = 32;\n\n// TREES RELATED CONSTANTS\nglobal VK_TREE_HEIGHT: Field = 3;\nglobal FUNCTION_TREE_HEIGHT: Field = 5;\nglobal CONTRACT_TREE_HEIGHT: Field = 16;\nglobal NOTE_HASH_TREE_HEIGHT: Field = 32;\nglobal PUBLIC_DATA_TREE_HEIGHT: Field = 254;\nglobal NULLIFIER_TREE_HEIGHT: Field = 20;\nglobal L1_TO_L2_MSG_TREE_HEIGHT: Field = 16;\nglobal ROLLUP_VK_TREE_HEIGHT: Field = 8;\n\n// SUB-TREES RELATED CONSTANTS\nglobal CONTRACT_SUBTREE_HEIGHT: Field = 1;\nglobal CONTRACT_SUBTREE_SIBLING_PATH_LENGTH: Field = 15;\nglobal NOTE_HASH_SUBTREE_HEIGHT: Field = 7;\nglobal NOTE_HASH_SUBTREE_SIBLING_PATH_LENGTH: Field = 25;\nglobal NULLIFIER_SUBTREE_HEIGHT: Field = 7;\nglobal ARCHIVE_HEIGHT: Field = 16;\nglobal NULLIFIER_SUBTREE_SIBLING_PATH_LENGTH: Field = 13;\nglobal L1_TO_L2_MSG_SUBTREE_HEIGHT: Field = 4;\nglobal L1_TO_L2_MSG_SUBTREE_SIBLING_PATH_LENGTH: Field = 12;\n\n// MISC CONSTANTS\nglobal FUNCTION_SELECTOR_NUM_BYTES: Field = 4;\nglobal MAPPING_SLOT_PEDERSEN_SEPARATOR: Field = 4;\nglobal NUM_FIELDS_PER_SHA256: Field = 2;\nglobal ARGS_HASH_CHUNK_LENGTH: u32 = 32;\nglobal ARGS_HASH_CHUNK_COUNT: u32 = 16;\n\n\n// NOIR CONSTANTS - constants used only in yarn-packages/noir-contracts\n// Some are defined here because Noir doesn't yet support globals referencing other globals yet.\n// Move these constants to a noir file once the issue bellow is resolved:\n// https://github.com/noir-lang/noir/issues/1734\nglobal L1_TO_L2_MESSAGE_LENGTH: Field = 8;\nglobal L1_TO_L2_MESSAGE_ORACLE_CALL_LENGTH: Field = 26;\nglobal MAX_NOTE_FIELDS_LENGTH: Field = 20;\n// GET_NOTE_ORACLE_RETURN_LENGT = MAX_NOTE_FIELDS_LENGTH + 1 + 2\n// The plus 1 is 1 extra field for nonce.\n// + 2 for EXTRA_DATA: [number_of_return_notes, contract_address]\nglobal GET_NOTE_ORACLE_RETURN_LENGTH: Field = 23;\nglobal MAX_NOTES_PER_PAGE: Field = 10;\n// VIEW_NOTE_ORACLE_RETURN_LENGTH = MAX_NOTES_PER_PAGE * (MAX_NOTE_FIELDS_LENGTH + 1) + 2;\nglobal VIEW_NOTE_ORACLE_RETURN_LENGTH: Field = 212;\nglobal CALL_CONTEXT_LENGTH: Field = 7;\nglobal BLOCK_HEADER_LENGTH: Field = 7;\nglobal FUNCTION_DATA_LENGTH: Field = 4;\nglobal CONTRACT_DEPLOYMENT_DATA_LENGTH: Field = 6;\n// Change this ONLY if you have changed the PrivateCircuitPublicInputs structure.\n// In other words, if the structure/size of the public inputs of a function call changes then we\n// should change this constant as well as the offsets in private_call_stack_item.nr\nglobal PRIVATE_CIRCUIT_PUBLIC_INPUTS_LENGTH: Field = 155;\nglobal CONTRACT_STORAGE_UPDATE_REQUEST_LENGTH: Field = 3;\nglobal CONTRACT_STORAGE_READ_LENGTH: Field = 2;\n// Change this ONLY if you have changed the PublicCircuitPublicInputs structure.\nglobal PUBLIC_CIRCUIT_PUBLIC_INPUTS_LENGTH: Field = 142;\nglobal GET_NOTES_ORACLE_RETURN_LENGTH: Field = 674;\nglobal EMPTY_NULLIFIED_COMMITMENT: Field = 1000000;\nglobal CALL_PRIVATE_FUNCTION_RETURN_SIZE: Field = 161;\nglobal PUBLIC_CIRCUIT_PUBLIC_INPUTS_HASH_INPUT_LENGTH: Field = 87;\nglobal PRIVATE_CIRCUIT_PUBLIC_INPUTS_HASH_INPUT_LENGTH: Field = 144;\nglobal COMMITMENTS_NUM_BYTES_PER_BASE_ROLLUP: Field = 4096;\nglobal NULLIFIERS_NUM_BYTES_PER_BASE_ROLLUP: Field = 4096;\nglobal PUBLIC_DATA_WRITES_NUM_BYTES_PER_BASE_ROLLUP: Field = 2048;\nglobal CONTRACTS_NUM_BYTES_PER_BASE_ROLLUP: Field = 64;\nglobal CONTRACT_DATA_NUM_BYTES_PER_BASE_ROLLUP: Field = 128;\nglobal CONTRACT_DATA_NUM_BYTES_PER_BASE_ROLLUP_UNPADDED: Field = 104;\nglobal L2_TO_L1_MSGS_NUM_BYTES_PER_BASE_ROLLUP: Field = 128;\nglobal LOGS_HASHES_NUM_BYTES_PER_BASE_ROLLUP: Field = 128;\n\n/**\n * Enumerate the hash_indices which are used for pedersen hashing.\n * We start from 1 to avoid the default generators. The generator indices are listed\n * based on the number of elements each index hashes. The following conditions must be met:\n *\n * +-----------+-------------------------------+----------------------+\n * | Hash size | Number of elements hashed (n) | Condition to use     |\n * |-----------+-------------------------------+----------------------|\n * | LOW       | n ≤ 8                         | 0 < hash_index ≤ 32  |\n * | MID       | 8 < n ≤ 16                    | 32 < hash_index ≤ 40 |\n * | HIGH      | 16 < n ≤ 48                   | 40 < hash_index ≤ 48 |\n * +-----------+-------------------------------+----------------------+\n *\n * Note: When modifying, modify `GeneratorIndexPacker` in packer.hpp accordingly.\n */\n// Indices with size ≤ 8\nglobal GENERATOR_INDEX__COMMITMENT = 1;\nglobal GENERATOR_INDEX__COMMITMENT_NONCE = 2;\nglobal GENERATOR_INDEX__UNIQUE_COMMITMENT = 3;\nglobal GENERATOR_INDEX__SILOED_COMMITMENT = 4;\nglobal GENERATOR_INDEX__NULLIFIER = 5;\nglobal GENERATOR_INDEX__INITIALIZATION_NULLIFIER = 6;\nglobal GENERATOR_INDEX__OUTER_NULLIFIER = 7;\nglobal GENERATOR_INDEX__PUBLIC_DATA_READ = 8;\nglobal GENERATOR_INDEX__PUBLIC_DATA_UPDATE_REQUEST = 9;\nglobal GENERATOR_INDEX__FUNCTION_DATA = 10;\nglobal GENERATOR_INDEX__FUNCTION_LEAF = 11;\nglobal GENERATOR_INDEX__CONTRACT_DEPLOYMENT_DATA = 12;\nglobal GENERATOR_INDEX__CONSTRUCTOR = 13;\nglobal GENERATOR_INDEX__CONSTRUCTOR_ARGS = 14;\nglobal GENERATOR_INDEX__CONTRACT_ADDRESS = 15;\nglobal GENERATOR_INDEX__CONTRACT_LEAF = 16;\nglobal GENERATOR_INDEX__CALL_CONTEXT = 17;\nglobal GENERATOR_INDEX__CALL_STACK_ITEM = 18;\nglobal GENERATOR_INDEX__CALL_STACK_ITEM_2 = 19;\nglobal GENERATOR_INDEX__L1_TO_L2_MESSAGE_SECRET = 20;\nglobal GENERATOR_INDEX__L2_TO_L1_MSG = 21;\nglobal GENERATOR_INDEX__TX_CONTEXT = 22;\nglobal GENERATOR_INDEX__PUBLIC_LEAF_INDEX = 23;\nglobal GENERATOR_INDEX__PUBLIC_DATA_LEAF = 24;\nglobal GENERATOR_INDEX__SIGNED_TX_REQUEST = 25;\nglobal GENERATOR_INDEX__GLOBAL_VARIABLES = 26;\nglobal GENERATOR_INDEX__PARTIAL_ADDRESS = 27;\nglobal GENERATOR_INDEX__BLOCK_HASH = 28;\n// Indices with size ≤ 16\nglobal GENERATOR_INDEX__TX_REQUEST = 33;\nglobal GENERATOR_INDEX__SIGNATURE_PAYLOAD = 34;\n// Indices with size ≤ 44\nglobal GENERATOR_INDEX__VK = 41;\nglobal GENERATOR_INDEX__PRIVATE_CIRCUIT_PUBLIC_INPUTS = 42;\nglobal GENERATOR_INDEX__PUBLIC_CIRCUIT_PUBLIC_INPUTS = 43;\nglobal GENERATOR_INDEX__FUNCTION_ARGS = 44;\n",
        "path": "/protocol_types/constants.nr"
      },
      "93": {
        "source": "use dep::protocol_types::constants::{\n    RETURN_VALUES_LENGTH,\n    MAX_READ_REQUESTS_PER_CALL,\n    MAX_PENDING_READ_REQUESTS_PER_CALL,\n    MAX_NEW_COMMITMENTS_PER_CALL,\n    MAX_NEW_NULLIFIERS_PER_CALL,\n    MAX_PRIVATE_CALL_STACK_LENGTH_PER_CALL,\n    MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL,\n    MAX_NEW_L2_TO_L1_MSGS_PER_CALL,\n    NUM_FIELDS_PER_SHA256,\n    MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_CALL,\n    MAX_PUBLIC_DATA_READS_PER_CALL,\n    GENERATOR_INDEX__FUNCTION_ARGS,\n    BLOCK_HEADER_LENGTH,\n    CONTRACT_DEPLOYMENT_DATA_LENGTH,\n    CALL_CONTEXT_LENGTH,\n    PRIVATE_CIRCUIT_PUBLIC_INPUTS_LENGTH,\n    PRIVATE_CIRCUIT_PUBLIC_INPUTS_HASH_INPUT_LENGTH,\n    CONTRACT_STORAGE_UPDATE_REQUEST_LENGTH,\n    CONTRACT_STORAGE_READ_LENGTH,\n    PUBLIC_CIRCUIT_PUBLIC_INPUTS_LENGTH,\n    PUBLIC_CIRCUIT_PUBLIC_INPUTS_HASH_INPUT_LENGTH,\n    GENERATOR_INDEX__BLOCK_HASH,\n    GENERATOR_INDEX__PUBLIC_CIRCUIT_PUBLIC_INPUTS,\n    GENERATOR_INDEX__FUNCTION_DATA,\n    GENERATOR_INDEX__PUBLIC_DATA_READ,\n    GENERATOR_INDEX__PUBLIC_DATA_UPDATE_REQUEST,\n    GENERATOR_INDEX__CALL_CONTEXT,\n    GENERATOR_INDEX__PRIVATE_CIRCUIT_PUBLIC_INPUTS,\n    GENERATOR_INDEX__CONTRACT_DEPLOYMENT_DATA,\n};\n\nuse crate::oracle::debug_log;\nuse crate::types::vec::BoundedVec;\nuse crate::types::point::Point;\nuse crate::hash::pedersen_hash;\n\n// docs:start:private-global-variables\nstruct PrivateGlobalVariables {\n    chain_id: Field,\n    version: Field,\n}\n// docs:end:private-global-variables\n\nimpl PrivateGlobalVariables {\n    fn serialize(self) -> [Field; 2] {\n        [self.chain_id, self.version]\n    }\n}\n\n// docs:start:public-global-variables\nstruct PublicGlobalVariables {\n    chain_id: Field,\n    version: Field,\n    block_number: Field,\n    timestamp: Field,\n}\n// docs:end:public-global-variables\n\nimpl PublicGlobalVariables {\n    fn serialize(self) -> [Field; 4] {\n        [self.chain_id, self.version, self.block_number, self.timestamp]\n    }\n}\n\n// docs:start:contract-deployment-data\nstruct ContractDeploymentData {\n    deployer_public_key: Point,\n    constructor_vk_hash : Field,\n    function_tree_root : Field,\n    contract_address_salt : Field,\n    portal_contract_address : Field,\n}\n// docs:end:contract-deployment-data\n\nimpl ContractDeploymentData {\n    fn serialize(self) -> [Field; CONTRACT_DEPLOYMENT_DATA_LENGTH] {\n        [\n            self.deployer_public_key.x,\n            self.deployer_public_key.y,\n            self.constructor_vk_hash,\n            self.function_tree_root,\n            self.contract_address_salt,\n            self.portal_contract_address,\n        ]\n    }\n\n    fn hash(self) -> Field {\n        pedersen_hash(self.serialize(), GENERATOR_INDEX__CONTRACT_DEPLOYMENT_DATA)\n    }\n}\n\n// PrivateContextInputs are expected to be provided to each private function\n// docs:start:private-context-inputs\nstruct PrivateContextInputs {\n    call_context : CallContext,\n    block_header: BlockHeader,\n    contract_deployment_data: ContractDeploymentData,\n    private_global_variables: PrivateGlobalVariables,\n}\n// docs:end:private-context-inputs\n\n// PublicContextInputs are expected to be provided to each public function\n// docs:start:public-context-inputs\nstruct PublicContextInputs {\n    call_context: CallContext,\n    block_header: BlockHeader,\n\n    public_global_variables: PublicGlobalVariables,\n}\n// docs:end:public-context-inputs\n\n// docs:start:call-context\nstruct CallContext {\n    msg_sender : Field,\n    storage_contract_address : Field,\n    portal_contract_address : Field,\n    function_selector: Field,\n\n    is_delegate_call : bool,\n    is_static_call : bool,\n    is_contract_deployment: bool,\n}\n// docs:end:call-context\n\nimpl CallContext {\n    fn serialize(self) -> [Field; CALL_CONTEXT_LENGTH] {\n        [\n            self.msg_sender,\n            self.storage_contract_address,\n            self.portal_contract_address,\n            self.function_selector,\n            self.is_delegate_call as Field,\n            self.is_static_call as Field,\n            self.is_contract_deployment as Field,\n        ]\n    }\n\n    fn hash(self) -> Field {\n        pedersen_hash(self.serialize(), GENERATOR_INDEX__CALL_CONTEXT)\n    }\n}\n\n// docs:start:block-header\nstruct BlockHeader {\n    note_hash_tree_root : Field,\n    nullifier_tree_root : Field,\n    contract_tree_root : Field,\n    l1_to_l2_messages_tree_root : Field,\n    archive_root: Field,\n    public_data_tree_root: Field,\n    global_variables_hash: Field,\n}\n// docs:end:block-header\n\nimpl BlockHeader {\n    // NOTE: this order must match the order in `private_circuit_public_inputs.hpp`\n    pub fn serialize(self) -> [Field; BLOCK_HEADER_LENGTH] {\n        [\n            self.note_hash_tree_root,\n            self.nullifier_tree_root,\n            self.contract_tree_root,\n            self.l1_to_l2_messages_tree_root,\n            self.archive_root,\n            self.public_data_tree_root,\n            self.global_variables_hash,\n        ]\n    }\n\n    pub fn deserialize(deserialized: [Field; BLOCK_HEADER_LENGTH]) -> Self {\n        BlockHeader {\n            note_hash_tree_root: deserialized[0],\n            nullifier_tree_root: deserialized[1],\n            contract_tree_root: deserialized[2],\n            l1_to_l2_messages_tree_root: deserialized[3],\n            archive_root: deserialized[4],\n            public_data_tree_root: deserialized[5],\n            global_variables_hash: deserialized[6],\n        }\n    }\n\n    pub fn empty() -> Self {\n        Self { note_hash_tree_root: 0, nullifier_tree_root: 0, contract_tree_root: 0, l1_to_l2_messages_tree_root: 0, archive_root: 0, public_data_tree_root: 0, global_variables_hash: 0 }\n    }\n\n    pub fn block_hash(self) -> Field {\n        // TODO(#3442): Unify the ordering in `BlockHeader::serialize` function and the ordering\n        // in the block hash preimage --> This requires changes in the circuits.\n        let inputs = [\n            self.global_variables_hash,\n            self.note_hash_tree_root,\n            self.nullifier_tree_root,\n            self.contract_tree_root,\n            self.l1_to_l2_messages_tree_root,\n            self.public_data_tree_root\n        ];\n        pedersen_hash(inputs, GENERATOR_INDEX__BLOCK_HASH)\n    }\n}\n\nstruct FunctionData {\n    function_selector: Field,\n    is_internal: bool,\n    is_private: bool,\n    is_constructor: bool,\n}\n\nimpl FunctionData {\n    fn hash(self) -> Field {\n        pedersen_hash([\n            self.function_selector,\n            self.is_internal as Field,\n            self.is_private as Field,\n            self.is_constructor as Field,\n        ], GENERATOR_INDEX__FUNCTION_DATA)\n    }\n}\n\nstruct PrivateCircuitPublicInputs {\n    call_context: CallContext,\n    args_hash: Field,\n    return_values: [Field; RETURN_VALUES_LENGTH],\n    read_requests: [Field; crate::abi::MAX_READ_REQUESTS_PER_CALL],\n    pending_read_requests: [Field; crate::abi::MAX_PENDING_READ_REQUESTS_PER_CALL],\n    new_commitments: [Field; MAX_NEW_COMMITMENTS_PER_CALL],\n    new_nullifiers: [Field; MAX_NEW_NULLIFIERS_PER_CALL],\n    nullified_commitments: [Field; MAX_NEW_NULLIFIERS_PER_CALL],\n    private_call_stack: [Field; MAX_PRIVATE_CALL_STACK_LENGTH_PER_CALL],\n    public_call_stack: [Field; MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL],\n    new_l2_to_l1_msgs: [Field; MAX_NEW_L2_TO_L1_MSGS_PER_CALL],\n    // Explore introducing a new type like uint256 (similar to Point), so it's more explicit that\n    // we're talking about a single number backed by two field elements.\n    encrypted_logs_hash: [Field; NUM_FIELDS_PER_SHA256],\n    unencrypted_logs_hash: [Field; NUM_FIELDS_PER_SHA256],\n    encrypted_log_preimages_length: Field,\n    unencrypted_log_preimages_length: Field,\n    block_header: BlockHeader,\n    contract_deployment_data: ContractDeploymentData,\n    chain_id: Field,\n    version: Field,\n}\n\nimpl PrivateCircuitPublicInputs {\n    fn hash(self) -> Field {\n        let mut fields: BoundedVec<Field, PRIVATE_CIRCUIT_PUBLIC_INPUTS_HASH_INPUT_LENGTH> = BoundedVec::new(0); \n        fields.push(self.call_context.hash());\n        fields.push(self.args_hash);\n        fields.push_array(self.return_values);\n        fields.push_array(self.read_requests);\n        fields.push_array(self.pending_read_requests);\n        fields.push_array(self.new_commitments);\n        fields.push_array(self.new_nullifiers);\n        fields.push_array(self.nullified_commitments);\n        fields.push_array(self.private_call_stack);\n        fields.push_array(self.public_call_stack);\n        fields.push_array(self.new_l2_to_l1_msgs);\n        fields.push_array(self.encrypted_logs_hash);\n        fields.push_array(self.unencrypted_logs_hash);\n        fields.push(self.encrypted_log_preimages_length);\n        fields.push(self.unencrypted_log_preimages_length);\n        fields.push_array(self.block_header.serialize());\n        fields.push(self.contract_deployment_data.hash());\n        fields.push(self.chain_id);\n        fields.push(self.version);\n\n        pedersen_hash(fields.storage, GENERATOR_INDEX__PRIVATE_CIRCUIT_PUBLIC_INPUTS)\n    }\n\n    fn serialize(self) -> [Field; PRIVATE_CIRCUIT_PUBLIC_INPUTS_LENGTH] {\n        let mut fields: BoundedVec<Field, PRIVATE_CIRCUIT_PUBLIC_INPUTS_LENGTH> = BoundedVec::new(0); \n        fields.push_array(self.call_context.serialize());\n        fields.push(self.args_hash);\n        fields.push_array(self.return_values);\n        fields.push_array(self.read_requests);\n        fields.push_array(self.pending_read_requests);\n        fields.push_array(self.new_commitments);\n        fields.push_array(self.new_nullifiers);\n        fields.push_array(self.private_call_stack);\n        fields.push_array(self.public_call_stack);\n        fields.push_array(self.new_l2_to_l1_msgs);\n        fields.push_array(self.encrypted_logs_hash);\n        fields.push_array(self.unencrypted_logs_hash);\n        fields.push(self.encrypted_log_preimages_length);\n        fields.push(self.unencrypted_log_preimages_length);\n        fields.push_array(self.block_header.serialize());\n        fields.push_array(self.contract_deployment_data.serialize());\n        fields.push(self.chain_id);\n        fields.push(self.version);\n        fields.storage\n    }\n}\n\nstruct ContractStorageRead {\n    storage_slot: Field,\n    value: Field,\n}\n\nimpl ContractStorageRead {\n    pub fn serialize(self) -> [Field; CONTRACT_STORAGE_READ_LENGTH] {\n        [self.storage_slot, self.value]\n    }\n\n    pub fn hash(self) -> Field {\n        pedersen_hash(self.serialize(), GENERATOR_INDEX__PUBLIC_DATA_READ)\n    }\n\n    pub fn empty() -> Self {\n        Self { storage_slot: 0, value: 0 }\n    }\n}\n\nstruct ContractStorageUpdateRequest {\n    storage_slot: Field,\n    old_value: Field,\n    new_value: Field,\n}\n\nimpl ContractStorageUpdateRequest {\n    pub fn serialize(self) -> [Field; CONTRACT_STORAGE_UPDATE_REQUEST_LENGTH] {\n        [self.storage_slot, self.old_value, self.new_value]\n    }\n\n    pub fn hash(self) -> Field {\n        pedersen_hash(self.serialize(), GENERATOR_INDEX__PUBLIC_DATA_UPDATE_REQUEST)\n    }\n\n    pub fn empty() -> Self {\n        Self { storage_slot: 0, old_value: 0, new_value: 0 }\n    }\n}\n\nstruct PublicCircuitPublicInputs {\n    call_context: CallContext,\n    args_hash: Field,\n    return_values: [Field; RETURN_VALUES_LENGTH],\n    contract_storage_update_requests: [ContractStorageUpdateRequest; MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_CALL],\n    contract_storage_read: [ContractStorageRead; MAX_PUBLIC_DATA_READS_PER_CALL],\n    public_call_stack: [Field; MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL],\n    new_commitments: [Field; MAX_NEW_COMMITMENTS_PER_CALL],\n    new_nullifiers: [Field; crate::abi::MAX_NEW_NULLIFIERS_PER_CALL],\n    new_l2_to_l1_msgs: [Field; crate::abi::MAX_NEW_L2_TO_L1_MSGS_PER_CALL],\n    unencrypted_logs_hash: [Field; NUM_FIELDS_PER_SHA256],\n    unencrypted_log_preimages_length: Field,\n    block_header: BlockHeader,\n    prover_address: Field,\n}\n\nimpl PublicCircuitPublicInputs {\n    \n    pub fn hash(self) -> Field {\n        let mut inputs: BoundedVec<Field, PUBLIC_CIRCUIT_PUBLIC_INPUTS_HASH_INPUT_LENGTH> = BoundedVec::new(0);\n        inputs.push(self.call_context.hash());\n        inputs.push(self.args_hash);\n        inputs.push_array(self.return_values);\n        for i in 0..MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_CALL {\n            inputs.push(self.contract_storage_update_requests[i].hash());\n        }\n        for i in 0..MAX_PUBLIC_DATA_READS_PER_CALL {\n            inputs.push(self.contract_storage_read[i].hash());\n        }\n        inputs.push_array(self.public_call_stack);\n        inputs.push_array(self.new_commitments);\n        inputs.push_array(self.new_nullifiers);\n        inputs.push_array(self.new_l2_to_l1_msgs);\n\n        inputs.push_array(self.unencrypted_logs_hash);\n        inputs.push(self.unencrypted_log_preimages_length);\n        inputs.push_array(self.block_header.serialize());\n        inputs.push(self.prover_address);\n\n        pedersen_hash(inputs.storage, GENERATOR_INDEX__PUBLIC_CIRCUIT_PUBLIC_INPUTS)\n    }\n\n    pub fn serialize(self) -> [Field; PUBLIC_CIRCUIT_PUBLIC_INPUTS_LENGTH] {\n        let mut fields: BoundedVec<Field, PUBLIC_CIRCUIT_PUBLIC_INPUTS_LENGTH> = BoundedVec::new(0); \n        fields.push_array(self.call_context.serialize());   \n        fields.push(self.args_hash);\n        fields.push_array(self.return_values);\n        for i in 0..MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_CALL {\n            fields.push_array(self.contract_storage_update_requests[i].serialize());\n        }\n        for i in 0..MAX_PUBLIC_DATA_READS_PER_CALL {\n            fields.push_array(self.contract_storage_read[i].serialize());\n        }\n        fields.push_array(self.public_call_stack);\n        fields.push_array(self.new_commitments);\n        fields.push_array(self.new_nullifiers);\n        fields.push_array(self.new_l2_to_l1_msgs);\n        fields.push_array(self.unencrypted_logs_hash);\n        fields.push(self.unencrypted_log_preimages_length);\n        fields.push_array(self.block_header.serialize());\n        fields.push(self.prover_address);\n        fields.storage\n    }\n}\n\nstruct Hasher {\n    fields: [Field],\n}\n\nimpl Hasher {\n    pub fn new()-> Self {\n        Self { fields: [] }\n    }\n\n    pub fn add(&mut self, field: Field) {\n        self.fields = self.fields.push_back(field);\n    }\n\n    pub fn add_multiple<N>(&mut self, fields: [Field; N]) {\n        for i in 0..N {\n            self.fields = self.fields.push_back(fields[i]);\n        }\n    }\n\n    pub fn hash(self) -> Field {\n        hash_args(self.fields)\n    }\n}\n\nglobal ARGS_HASH_CHUNK_LENGTH: u32 = 32;\nglobal ARGS_HASH_CHUNK_COUNT: u32 = 16;\n\npub fn hash_args<N>(args: [Field; N]) -> Field {\n    if args.len() == 0 {\n        0\n    } else {\n        let mut chunks_hashes = [0; ARGS_HASH_CHUNK_COUNT];\n        for i in 0..ARGS_HASH_CHUNK_COUNT {\n            let mut chunk_hash = 0;\n            let start_chunk_index = i * ARGS_HASH_CHUNK_LENGTH;\n            if start_chunk_index < (args.len() as u32) {\n                let mut chunk_args = [0; ARGS_HASH_CHUNK_LENGTH];\n                for j in 0..ARGS_HASH_CHUNK_LENGTH {\n                    let item_index = i * ARGS_HASH_CHUNK_LENGTH + j;\n                    if item_index < (args.len() as u32) {\n                        chunk_args[j] = args[item_index];\n                    }\n                }\n                chunk_hash = pedersen_hash(chunk_args, GENERATOR_INDEX__FUNCTION_ARGS);\n            }\n            chunks_hashes[i] = chunk_hash;\n        }\n        pedersen_hash(chunks_hashes, GENERATOR_INDEX__FUNCTION_ARGS)\n    }\n}\n",
        "path": "/aztec/abi.nr"
      },
      "94": {
        "source": "use dep::protocol_types::constants::GENERATOR_INDEX__CONTRACT_ADDRESS;\nuse crate::hash::pedersen_hash;\n\npub fn compute_address(pub_key_x: Field, pub_key_y: Field, partial_address: Field) -> Field {\n    pedersen_hash([pub_key_x, pub_key_y, partial_address],\n        GENERATOR_INDEX__CONTRACT_ADDRESS)\n}\n",
        "path": "/aztec/address.nr"
      },
      "95": {
        "source": "use dep::protocol_types::constants::{\n    EMPTY_NULLIFIED_COMMITMENT,\n    MAX_NEW_COMMITMENTS_PER_CALL,\n    MAX_NEW_L2_TO_L1_MSGS_PER_CALL,\n    MAX_NEW_NULLIFIERS_PER_CALL,\n    MAX_PRIVATE_CALL_STACK_LENGTH_PER_CALL,\n    MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL,\n    MAX_PUBLIC_DATA_READS_PER_CALL,\n    MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_CALL,\n    MAX_READ_REQUESTS_PER_CALL,\n    MAX_PENDING_READ_REQUESTS_PER_CALL,\n    NUM_FIELDS_PER_SHA256,\n    RETURN_VALUES_LENGTH,\n};\n\nuse crate::abi;\n\nuse crate::abi::{\n    hash_args,\n    CallContext,\n    ContractDeploymentData,\n    BlockHeader,\n    FunctionData,\n    PrivateCircuitPublicInputs,\n    PublicCircuitPublicInputs,\n};\n\n// TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n// use dep::std::collections::vec::Vec;\n\n// l1 to l2 messaging\nuse crate::messaging::process_l1_to_l2_message;\nuse crate::private_call_stack_item::PrivateCallStackItem;\nuse crate::public_call_stack_item::PublicCallStackItem;\n\nuse crate::types::{\n    vec::BoundedVec,\n    point::Point,\n};\n\nuse crate::utils::arr_copy_slice;\n\nuse crate::oracle::{\n    arguments,\n    call_private_function::call_private_function_internal,\n    public_call::call_public_function_internal,\n    enqueue_public_function_call::enqueue_public_function_call_internal,\n    context::get_portal_address,\n    get_block_header::get_block_header,\n};\n\nuse dep::std::option::Option;\n\n// When finished, one can call .finish() to convert back to the abi\nstruct PrivateContext {\n    // docs:start:private-context\n    inputs: abi::PrivateContextInputs,\n\n    args_hash : Field,\n    return_values : BoundedVec<Field, RETURN_VALUES_LENGTH>,\n\n    read_requests: BoundedVec<Field, MAX_READ_REQUESTS_PER_CALL>,\n    pending_read_requests: BoundedVec<Field, MAX_PENDING_READ_REQUESTS_PER_CALL>,\n\n    new_commitments: BoundedVec<Field, MAX_NEW_COMMITMENTS_PER_CALL>,\n    new_nullifiers: BoundedVec<Field, MAX_NEW_NULLIFIERS_PER_CALL>,\n    nullified_commitments: BoundedVec<Field, MAX_NEW_NULLIFIERS_PER_CALL>,\n\n    private_call_stack : BoundedVec<Field, MAX_PRIVATE_CALL_STACK_LENGTH_PER_CALL>,\n    public_call_stack : BoundedVec<Field, MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL>,\n    new_l2_to_l1_msgs : BoundedVec<Field, MAX_NEW_L2_TO_L1_MSGS_PER_CALL>,\n    // docs:end:private-context\n\n    block_header: BlockHeader,\n\n    // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n    // encrypted_logs_preimages: Vec<Field>,\n    // unencrypted_logs_preimages: Vec<Field>,\n}\n\nimpl PrivateContext {\n    pub fn new(inputs: abi::PrivateContextInputs, args_hash: Field) -> PrivateContext {\n        PrivateContext {\n            inputs: inputs,\n\n            args_hash: args_hash,\n            return_values: BoundedVec::new(0),\n\n            read_requests: BoundedVec::new(0),\n            pending_read_requests: BoundedVec::new(0),\n\n            new_commitments: BoundedVec::new(0),\n            new_nullifiers: BoundedVec::new(0),\n            nullified_commitments: BoundedVec::new(0),\n\n            block_header: inputs.block_header,\n\n            private_call_stack: BoundedVec::new(0),\n            public_call_stack: BoundedVec::new(0),\n            new_l2_to_l1_msgs: BoundedVec::new(0),\n\n            // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n            // encrypted_logs_preimages: Vec::new(),\n            // unencrypted_logs_preimages: Vec::new(),\n        }\n    }\n\n    pub fn msg_sender(self) -> Field {\n        self.inputs.call_context.msg_sender\n    }\n\n    pub fn this_address(self) -> Field {\n        self.inputs.call_context.storage_contract_address\n    }\n\n    pub fn this_portal_address(self) -> Field {\n        self.inputs.call_context.portal_contract_address\n    }\n\n    pub fn chain_id(self) -> Field {\n        self.inputs.private_global_variables.chain_id\n    }\n\n    pub fn version(self) -> Field {\n        self.inputs.private_global_variables.version\n    }\n\n    pub fn selector(self) -> Field {\n        self.inputs.call_context.function_selector\n    }\n\n    pub fn get_block_header(self, block_number: u32) -> BlockHeader {\n        get_block_header(block_number, self)\n    }\n\n    pub fn finish(self) -> abi::PrivateCircuitPublicInputs {\n        // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n        let encrypted_logs_hash = [0; NUM_FIELDS_PER_SHA256];\n        let unencrypted_logs_hash = [0; NUM_FIELDS_PER_SHA256];\n        let encrypted_log_preimages_length = 0;\n        let unencrypted_log_preimages_length = 0;\n\n        let priv_circuit_pub_inputs = abi::PrivateCircuitPublicInputs {\n            call_context: self.inputs.call_context,\n            args_hash: self.args_hash,\n            return_values: self.return_values.storage,\n            read_requests: self.read_requests.storage,\n            pending_read_requests: self.pending_read_requests.storage,\n            new_commitments: self.new_commitments.storage,\n            new_nullifiers: self.new_nullifiers.storage,\n            nullified_commitments: self.nullified_commitments.storage,\n            private_call_stack: self.private_call_stack.storage,\n            public_call_stack: self.public_call_stack.storage,\n            new_l2_to_l1_msgs: self.new_l2_to_l1_msgs.storage,\n            encrypted_logs_hash: encrypted_logs_hash,\n            unencrypted_logs_hash: unencrypted_logs_hash,\n            encrypted_log_preimages_length: encrypted_log_preimages_length,\n            unencrypted_log_preimages_length: unencrypted_log_preimages_length,\n            block_header: self.block_header,\n            contract_deployment_data: self.inputs.contract_deployment_data,\n            chain_id: self.inputs.private_global_variables.chain_id,\n            version: self.inputs.private_global_variables.version,\n        };\n        priv_circuit_pub_inputs\n    }\n\n    pub fn push_read_request(&mut self, read_request: Field) {\n        self.read_requests.push(read_request);\n    }\n\n    pub fn push_pending_read_request(&mut self, pending_read_request: Field) {\n        self.pending_read_requests.push(pending_read_request);\n    }\n\n    pub fn push_new_note_hash(&mut self, note_hash: Field) {\n        self.new_commitments.push(note_hash);\n    }\n\n    // We never push a zero nullified_commitment as zero is used to indicate the end\n    // of a field array in private kernel. This routine transparently replaces a\n    // zero value into the special placeholder: EMPTY_NULLIFIED_COMMITMENT.\n    pub fn push_new_nullifier(&mut self, nullifier: Field, nullified_commitment: Field) {\n        self.new_nullifiers.push(nullifier);\n        let mut non_zero_nullified = nullified_commitment;\n        if (non_zero_nullified == 0) {\n            non_zero_nullified = EMPTY_NULLIFIED_COMMITMENT;\n        }\n        self.nullified_commitments.push(non_zero_nullified);\n    }\n\n    // docs:start:context_message_portal\n    pub fn message_portal(&mut self, content: Field) \n    // docs:end:context_message_portal\n    {\n        self.new_l2_to_l1_msgs.push(content);\n    }\n\n    // PrivateContextInputs must be temporarily passed in to prevent too many unknowns\n    // Note this returns self to get around an issue where mutable structs do not maintain mutations unless reassigned\n    // docs:start:context_consume_l1_to_l2_message\n    // docs:start:consume_l1_to_l2_message\n    pub fn consume_l1_to_l2_message(\n        &mut self,\n        msg_key: Field,\n        content: Field,\n        secret: Field\n    ) \n    // docs:end:context_consume_l1_to_l2_message\n    {\n        let nullifier = process_l1_to_l2_message(self.block_header.l1_to_l2_messages_tree_root, self.this_address(), self.this_portal_address(), self.chain_id(), self.version(), msg_key, content, secret);\n\n        // Push nullifier (and the \"commitment\" corresponding to this can be \"empty\")\n        self.push_new_nullifier(nullifier, EMPTY_NULLIFIED_COMMITMENT)\n    }\n    // docs:end:consume_l1_to_l2_message\n\n    pub fn accumulate_encrypted_logs<N>(&mut self, log: [Field; N]) {\n        let _void1 = self.inputs;\n        let _void2 = log;\n        // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n    }\n\n    pub fn accumulate_unencrypted_logs<T>(&mut self, log: T) {\n        let _void1 = self.inputs;\n        let _void2 = log;\n        // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n    }\n\n    pub fn call_private_function<ARGS_COUNT>(\n        &mut self,\n        contract_address: Field, \n        function_selector: Field, \n        args: [Field; ARGS_COUNT]\n    ) -> [Field; RETURN_VALUES_LENGTH] {\n        let args_hash = hash_args(args);\n        assert(args_hash == arguments::pack_arguments(args));\n        self.call_private_function_with_packed_args(contract_address, function_selector, args_hash)\n    }\n\n    pub fn call_private_function_no_args(\n        &mut self,\n        contract_address: Field, \n        function_selector: Field, \n    ) -> [Field; RETURN_VALUES_LENGTH] {\n        self.call_private_function_with_packed_args(contract_address, function_selector, 0)\n    }\n\n    pub fn call_private_function_with_packed_args(\n        &mut self,\n        contract_address: Field,\n        function_selector: Field,\n        args_hash: Field\n    ) -> [Field; RETURN_VALUES_LENGTH] {\n        let fields = call_private_function_internal(\n            contract_address, \n            function_selector, \n            args_hash\n        );\n        let item = PrivateCallStackItem {\n            contract_address: fields[0],\n            function_data: FunctionData {\n                function_selector: fields[1],\n                is_internal: fields[2] as bool,\n                is_private: fields[3] as bool,\n                is_constructor: fields[4] as bool,\n            },\n            public_inputs: PrivateCircuitPublicInputs {\n                call_context: CallContext {\n                    msg_sender : fields[5],\n                    storage_contract_address : fields[6],\n                    portal_contract_address : fields[7],\n                    function_selector: fields[8], // practically same as fields[1]\n                    is_delegate_call : fields[9] as bool,\n                    is_static_call : fields[10] as bool,\n                    is_contract_deployment: fields[11] as bool,\n                },\n                // TODO handle the offsets as a variable incremented during extraction?\n                args_hash: fields[12],\n                return_values: arr_copy_slice(fields, [0; RETURN_VALUES_LENGTH], 13),\n                read_requests: arr_copy_slice(fields, [0; MAX_READ_REQUESTS_PER_CALL], 17),\n                pending_read_requests: arr_copy_slice(fields, [0; MAX_READ_REQUESTS_PER_CALL], 49),\n                new_commitments: arr_copy_slice(fields, [0; MAX_NEW_COMMITMENTS_PER_CALL], 81),\n                new_nullifiers: arr_copy_slice(fields, [0; MAX_NEW_NULLIFIERS_PER_CALL], 97),\n                nullified_commitments: arr_copy_slice(fields, [0; MAX_NEW_NULLIFIERS_PER_CALL], 113),\n                private_call_stack: arr_copy_slice(fields, [0; MAX_PRIVATE_CALL_STACK_LENGTH_PER_CALL], 129),\n                public_call_stack: arr_copy_slice(fields, [0; MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL], 133),\n                new_l2_to_l1_msgs: arr_copy_slice(fields, [0; MAX_NEW_L2_TO_L1_MSGS_PER_CALL], 137),\n                encrypted_logs_hash: arr_copy_slice(fields, [0; NUM_FIELDS_PER_SHA256], 139),\n                unencrypted_logs_hash: arr_copy_slice(fields, [0; NUM_FIELDS_PER_SHA256], 141),\n                encrypted_log_preimages_length: fields[143],\n                unencrypted_log_preimages_length: fields[144],\n                block_header: BlockHeader {\n                    // Must match order in `private_circuit_public_inputs.hpp`\n                    note_hash_tree_root : fields[145],\n                    nullifier_tree_root : fields[146],\n                    contract_tree_root : fields[147],\n                    l1_to_l2_messages_tree_root : fields[148],\n                    archive_root : fields[149],\n                    public_data_tree_root: fields[150],\n                    global_variables_hash: fields[151],\n                },\n                contract_deployment_data: ContractDeploymentData {\n                    deployer_public_key: Point::new(fields[152], fields[153]),\n                    constructor_vk_hash : fields[154],\n                    function_tree_root : fields[155],\n                    contract_address_salt : fields[156],\n                    portal_contract_address : fields[157],\n                },\n                chain_id: fields[158],\n                version: fields[159],\n            },\n            is_execution_request: fields[160] as bool,\n        };\n        assert(contract_address == item.contract_address);\n        assert(function_selector == item.function_data.function_selector);\n\n        assert(args_hash == item.public_inputs.args_hash);\n\n        assert(item.is_execution_request == false);\n\n        // Assert that the call context of the enqueued call generated by the oracle matches our request.\n        // We are issuing a regular call which is not delegate, static, or deployment. We also constrain\n        // the msg_sender in the nested call to be equal to our address, and the execution context address\n        // for the nested call to be equal to the address we actually called.\n        assert(item.public_inputs.call_context.is_delegate_call == false);\n        assert(item.public_inputs.call_context.is_static_call == false);\n        assert(item.public_inputs.call_context.is_contract_deployment == false);\n        assert(item.public_inputs.call_context.msg_sender == self.inputs.call_context.storage_contract_address);\n        assert(item.public_inputs.call_context.storage_contract_address == contract_address);\n\n        self.private_call_stack.push(item.hash());\n\n        item.public_inputs.return_values\n    }\n\n    pub fn call_public_function<ARGS_COUNT>(\n        &mut self,\n        contract_address: Field, \n        function_selector: Field, \n        args: [Field; ARGS_COUNT]\n    ) {\n        let args_hash = hash_args(args);\n        assert(args_hash == arguments::pack_arguments(args));\n        self.call_public_function_with_packed_args(contract_address, function_selector, args_hash)\n    }\n\n    pub fn call_public_function_no_args(\n        &mut self,\n        contract_address: Field, \n        function_selector: Field,\n    ) {\n        self.call_public_function_with_packed_args(contract_address, function_selector, 0)\n    }\n\n    pub fn call_public_function_with_packed_args(\n        &mut self,\n        contract_address: Field,\n        function_selector: Field,\n        args_hash: Field\n    ) {\n        let fields = enqueue_public_function_call_internal(\n            contract_address, \n            function_selector, \n            args_hash\n        );\n        let item = PublicCallStackItem {\n            contract_address: fields[0],\n            function_data: FunctionData {\n                function_selector: fields[1],\n                is_internal: fields[2] as bool,\n                is_private: fields[3] as bool,\n                is_constructor: fields[4] as bool,\n            },\n            public_inputs: PublicCircuitPublicInputs {\n                call_context: CallContext {\n                    msg_sender : fields[5],\n                    storage_contract_address : fields[6],\n                    portal_contract_address : fields[7],\n                    function_selector: fields[8], // practically same as fields[1]\n                    is_delegate_call : fields[9] as bool,\n                    is_static_call : fields[10] as bool,\n                    is_contract_deployment: fields[11] as bool,\n                },\n                args_hash: fields[12],\n                return_values: [0; RETURN_VALUES_LENGTH],\n                contract_storage_update_requests: [ContractStorageUpdateRequest::empty(); MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_CALL],\n                contract_storage_read: [ContractStorageRead::empty(); MAX_PUBLIC_DATA_READS_PER_CALL],\n                public_call_stack: [0; MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL],\n                new_commitments: [0; MAX_NEW_COMMITMENTS_PER_CALL],\n                new_nullifiers: [0; MAX_NEW_NULLIFIERS_PER_CALL],\n                new_l2_to_l1_msgs:[0; MAX_NEW_L2_TO_L1_MSGS_PER_CALL],\n                unencrypted_logs_hash:[0; NUM_FIELDS_PER_SHA256],\n                unencrypted_log_preimages_length: 0,\n                block_header: BlockHeader::empty(),\n                prover_address: 0,\n            },\n            is_execution_request: true,\n        };\n\n        assert(contract_address == item.contract_address);\n        assert(function_selector == item.function_data.function_selector);\n        \n        assert(args_hash == item.public_inputs.args_hash);\n\n        // Assert that the call context of the enqueued call generated by the oracle matches our request.\n        // We are issuing a regular call which is not delegate, static, or deployment. We also constrain\n        // the msg_sender in the nested call to be equal to our address, and the execution context address\n        // for the nested call to be equal to the address we actually called.\n        assert(item.public_inputs.call_context.is_delegate_call == false);\n        assert(item.public_inputs.call_context.is_static_call == false);\n        assert(item.public_inputs.call_context.is_contract_deployment == false);\n        assert(item.public_inputs.call_context.msg_sender == self.inputs.call_context.storage_contract_address);\n        assert(item.public_inputs.call_context.storage_contract_address == contract_address);\n\n        self.public_call_stack.push(item.hash());\n    }\n}\n\nuse crate::abi::{\n    ContractStorageRead,\n    ContractStorageUpdateRequest\n};\n\nstruct PublicContext {\n    inputs: abi::PublicContextInputs,\n\n    args_hash : Field,\n    return_values : BoundedVec<Field, RETURN_VALUES_LENGTH>,\n\n    contract_storage_update_requests: BoundedVec<ContractStorageUpdateRequest, MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_CALL>,\n    contract_storage_read: BoundedVec<ContractStorageRead, MAX_PUBLIC_DATA_READS_PER_CALL>,\n    public_call_stack: BoundedVec<Field, MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL>,\n\n    new_commitments: BoundedVec<Field, MAX_NEW_COMMITMENTS_PER_CALL>,\n    new_nullifiers: BoundedVec<Field, crate::abi::MAX_NEW_NULLIFIERS_PER_CALL>,\n\n    new_l2_to_l1_msgs: BoundedVec<Field, crate::abi::MAX_NEW_L2_TO_L1_MSGS_PER_CALL>,\n\n    unencrypted_logs_hash: BoundedVec<Field, NUM_FIELDS_PER_SHA256>,\n    unencrypted_logs_preimages_length: Field,\n\n    block_header: BlockHeader,\n    prover_address: Field,\n}\n\nimpl PublicContext {\n    pub fn new(inputs: abi::PublicContextInputs, args_hash: Field) -> PublicContext {\n        let empty_storage_read = ContractStorageRead::empty();\n        let empty_storage_update = ContractStorageUpdateRequest::empty();\n        PublicContext {\n            inputs: inputs,\n\n            args_hash: args_hash,\n            return_values: BoundedVec::new(0),\n\n            contract_storage_update_requests: BoundedVec::new(empty_storage_update),\n            contract_storage_read: BoundedVec::new(empty_storage_read),\n            public_call_stack: BoundedVec::new(0),\n\n            new_commitments: BoundedVec::new(0),\n            new_nullifiers: BoundedVec::new(0),\n\n            new_l2_to_l1_msgs: BoundedVec::new(0),\n\n            \n            unencrypted_logs_hash: BoundedVec::new(0),\n            unencrypted_logs_preimages_length: 0,\n\n            block_header: inputs.block_header,\n            prover_address: 0,\n\n            // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n            // encrypted_logs_preimages: Vec::new(),\n            // unencrypted_logs_preimages: Vec::new(),\n        }\n    }\n\n    pub fn msg_sender(self) -> Field {\n        self.inputs.call_context.msg_sender\n    }\n\n    pub fn this_address(self) -> Field {\n        self.inputs.call_context.storage_contract_address\n    }\n\n    pub fn this_portal_address(self) -> Field {\n        self.inputs.call_context.portal_contract_address\n    }\n\n    pub fn chain_id(self) -> Field {\n        self.inputs.public_global_variables.chain_id\n    }\n\n    pub fn version(self) -> Field {\n        self.inputs.public_global_variables.version\n    }\n\n    pub fn selector(self) -> Field {\n        self.inputs.call_context.function_selector\n    }\n\n    pub fn block_number(self) -> Field {\n        self.inputs.public_global_variables.block_number\n    }\n\n    pub fn timestamp(self) -> Field {\n        self.inputs.public_global_variables.timestamp\n    }\n\n    pub fn finish(self) -> abi::PublicCircuitPublicInputs {\n        // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n        let unencrypted_logs_hash = [0; NUM_FIELDS_PER_SHA256];\n        let unencrypted_log_preimages_length = 0;\n\n\n        // Compute the public call stack hashes\n        let pub_circuit_pub_inputs = abi::PublicCircuitPublicInputs {\n            call_context: self.inputs.call_context, // Done\n            args_hash: self.args_hash, // Done\n            contract_storage_update_requests: self.contract_storage_update_requests.storage,\n            contract_storage_read: self.contract_storage_read.storage,\n            return_values: self.return_values.storage,\n            new_commitments: self.new_commitments.storage,\n            new_nullifiers: self.new_nullifiers.storage,\n            public_call_stack: self.public_call_stack.storage,\n            new_l2_to_l1_msgs: self.new_l2_to_l1_msgs.storage,\n            unencrypted_logs_hash: unencrypted_logs_hash,\n            unencrypted_log_preimages_length: unencrypted_log_preimages_length,\n            block_header: self.inputs.block_header,\n            prover_address: self.prover_address,\n        };\n        pub_circuit_pub_inputs\n    }\n\n    pub fn push_new_note_hash(&mut self, note_hash: Field) {\n        self.new_commitments.push(note_hash);\n    }\n\n    pub fn push_new_nullifier(&mut self, nullifier: Field, _nullified_commitment: Field) {\n        self.new_nullifiers.push(nullifier);\n    }\n\n    pub fn message_portal(&mut self, content: Field) {\n        self.new_l2_to_l1_msgs.push(content);\n    }\n\n    // PrivateContextInputs must be temporarily passed in to prevent too many unknowns\n    // Note this returns self to get around an issue where mutable structs do not maintain mutations unless reassigned\n    pub fn consume_l1_to_l2_message(&mut self, msg_key: Field, content: Field, secret: Field) {\n        let this = (*self).this_address();\n        let nullifier = process_l1_to_l2_message(self.block_header.l1_to_l2_messages_tree_root, this, self.this_portal_address(), self.chain_id(), self.version(), msg_key, content, secret);\n\n        // Push nullifier (and the \"commitment\" corresponding to this can be \"empty\")\n        self.push_new_nullifier(nullifier, EMPTY_NULLIFIED_COMMITMENT)\n    }\n\n    pub fn accumulate_encrypted_logs<N>(&mut self, log: [Field; N]) {\n        let _void1 = self;\n        let _void2 = log;\n        // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n    }\n\n    pub fn accumulate_unencrypted_logs<T>(&mut self, log: T) {\n        let _void1 = self;\n        let _void2 = log;\n        // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n    }\n\n    pub fn call_public_function<ARGS_COUNT>(\n        _self: Self,\n        contract_address: Field, \n        function_selector: Field,\n        args: [Field; ARGS_COUNT],\n    ) -> [Field; RETURN_VALUES_LENGTH] {\n        let args_hash = abi::hash_args(args);\n        assert(args_hash == arguments::pack_arguments(args));\n        call_public_function_internal(\n            contract_address, \n            function_selector, \n            args_hash,\n        )\n    }\n\n    pub fn call_public_function_no_args(\n        _self: Self,\n        contract_address: Field, \n        function_selector: Field,\n    ) -> [Field; RETURN_VALUES_LENGTH] {\n        call_public_function_internal(\n            contract_address, \n            function_selector, \n            0,\n        )\n    }\n\n}\n\nstruct Context {\n    private: Option<&mut PrivateContext>,\n    public: Option<&mut PublicContext>,\n}\n\nimpl Context {\n    pub fn private(context: &mut PrivateContext) -> Context {\n        Context {\n            private: Option::some(context),\n            public: Option::none()\n        }\n    }\n\n    pub fn public(context: &mut PublicContext) -> Context {\n        Context {\n            public: Option::some(context),\n            private: Option::none()\n        }\n    }\n\n    pub fn none() -> Context {\n        Context {\n            public: Option::none(),\n            private: Option::none()\n        }\n    }\n}\n",
        "path": "/aztec/context.nr"
      },
      "96": {
        "source": "use dep::std::hash::{pedersen_hash_with_separator, sha256};\nuse dep::protocol_types::constants::{\n  GENERATOR_INDEX__SIGNATURE_PAYLOAD,\n  GENERATOR_INDEX__L1_TO_L2_MESSAGE_SECRET,\n};\n\npub fn sha256_to_field<N>(bytes_to_hash: [u8; N]) -> Field {\n    let sha256_hashed = sha256(bytes_to_hash);\n\n    // Convert it to a field element\n    let mut v = 1;\n    let mut high = 0 as Field;\n    let mut low = 0 as Field;\n\n    for i in 0..16 {\n        high = high + (sha256_hashed[15 - i] as Field) * v;\n        low = low + (sha256_hashed[16 + 15 - i] as Field) * v;\n        v = v * 256;\n    }\n\n    // Abuse that a % p + b % p = (a + b) % p and that low < p\n    let hash_in_a_field = low + high * v;\n\n    hash_in_a_field\n}\n\npub fn compute_secret_hash(secret: Field) -> Field {\n    // TODO(#1205) This is probably not the right index to use\n    pedersen_hash([secret], GENERATOR_INDEX__L1_TO_L2_MESSAGE_SECRET)\n}\n\npub fn pedersen_hash<N>(inputs: [Field; N], hash_index: u32) -> Field {\n    pedersen_hash_with_separator(inputs, hash_index)\n}\n",
        "path": "/aztec/hash.nr"
      },
      "103": {
        "source": "use crate::context::{PrivateContext, PublicContext};\nuse crate::oracle;\nuse crate::types::point::Point;\n\npub fn emit_encrypted_log<N>(\n    context: &mut PrivateContext,\n    contract_address: Field,\n    storage_slot: Field,\n    encryption_pub_key: Point,\n    log: [Field; N]\n) {\n    let _ = oracle::logs::emit_encrypted_log(contract_address, storage_slot, encryption_pub_key, log);\n    context.accumulate_encrypted_logs(log);\n}\n\npub fn emit_unencrypted_log<T>(context: &mut PublicContext, log: T) {\n    let contract_address = context.this_address();\n    let event_selector = 5; // TODO: compute actual event selector.\n    let _ = oracle::logs::emit_unencrypted_log(contract_address, event_selector, log);\n    // context.accumulate_unencrypted_logs(log);\n}\n\n// TODO: We might want to remove this since emitting unencrypted logs from private functions is violating privacy.\n// --> might be a better approach to force devs to make a public function call that emits the log if needed then\n// it would be less easy to accidentally leak information.\n// If we decide to keep this function around would make sense to wait for traits and then merge it with emit_unencrypted_log.\npub fn emit_unencrypted_log_from_private<T>(context: &mut PrivateContext, log: T) {\n    let contract_address = context.this_address();\n    let event_selector = 5; // TODO: compute actual event selector.\n    let _ = oracle::logs::emit_unencrypted_log(contract_address, event_selector, log);\n    // context.accumulate_unencrypted_logs(log);\n}\n",
        "path": "/aztec/log.nr"
      },
      "108": {
        "source": "use crate::abi::PublicContextInputs;\nuse crate::context::{\n    PrivateContext,\n    PublicContext,\n};\nuse crate::note::{\n    note_header::NoteHeader,\n    note_interface::NoteInterface,\n    utils::compute_inner_note_hash,\n};\nuse crate::oracle::notes::{notify_created_note, notify_nullified_note};\nuse dep::protocol_types::constants::EMPTY_NULLIFIED_COMMITMENT;\n\npub fn create_note<Note, N>(\n    context: &mut PrivateContext,\n    storage_slot: Field,\n    note: &mut Note,\n    note_interface: NoteInterface<Note, N>,\n    broadcast: bool\n) {\n    let contract_address = (*context).this_address();\n\n    let header = NoteHeader { contract_address, storage_slot, nonce: 0, is_transient: true };\n    let set_header = note_interface.set_header;\n    set_header(note, header);\n    let inner_note_hash = compute_inner_note_hash(note_interface, *note);\n\n    let serialize = note_interface.serialize;\n    let serialized_note = serialize(*note);\n    assert(notify_created_note(storage_slot, serialized_note, inner_note_hash) == 0);\n\n    context.push_new_note_hash(inner_note_hash);\n\n    if broadcast {\n        let broadcast = note_interface.broadcast;\n        broadcast(context, storage_slot, *note);\n    }\n}\n\npub fn create_note_hash_from_public<Note, N>(\n    context: &mut PublicContext,\n    storage_slot: Field,\n    note: &mut Note,\n    note_interface: NoteInterface<Note, N>\n) {\n    let contract_address = (*context).this_address();\n\n    let header = NoteHeader { contract_address, storage_slot, nonce: 0, is_transient: true };\n    let set_header = note_interface.set_header;\n    set_header(note, header);\n    let inner_note_hash = compute_inner_note_hash(note_interface, *note);\n\n    context.push_new_note_hash(inner_note_hash);\n}\n\npub fn destroy_note<Note, N>(context: &mut PrivateContext, note: Note, note_interface: NoteInterface<Note, N>) {\n    let mut nullifier = 0;\n    let mut nullified_commitment: Field = EMPTY_NULLIFIED_COMMITMENT;\n    let compute_nullifier = note_interface.compute_nullifier;\n    nullifier = compute_nullifier(note);\n\n    // We also need the note commitment corresponding to the \"nullifier\"\n    let get_header = note_interface.get_header;\n    let header = get_header(note);\n    // `nullified_commitment` is used to inform the kernel which pending commitment\n    // the nullifier corresponds to so they can be matched and both squashed/deleted.\n    // nonzero nonce implies \"persistable\" nullifier (nullifies a persistent/in-tree\n    // commitment) in which case `nullified_commitment` is not used since the kernel\n    // just siloes and forwards the nullifier to its output.\n    if (header.is_transient) {\n        // TODO(1718): Can we reuse the note commitment computed in `compute_nullifier`?\n        nullified_commitment = compute_inner_note_hash(note_interface, note);\n    }\n    assert(notify_nullified_note(nullifier, nullified_commitment) == 0);\n\n    context.push_new_nullifier(nullifier, nullified_commitment)\n}\n",
        "path": "/aztec/note/lifecycle.nr"
      },
      "109": {
        "source": "use dep::std::option::Option;\nuse dep::protocol_types::constants::{\n    MAX_READ_REQUESTS_PER_CALL,\n    GET_NOTE_ORACLE_RETURN_LENGTH,\n    GET_NOTES_ORACLE_RETURN_LENGTH,\n    MAX_NOTES_PER_PAGE,\n    VIEW_NOTE_ORACLE_RETURN_LENGTH,\n};\nuse crate::context::PrivateContext;\nuse crate::note::{\n    note_getter_options::{NoteGetterOptions, Select, Sort, SortOrder},\n    note_interface::NoteInterface,\n    note_viewer_options::NoteViewerOptions,\n    utils::compute_note_hash_for_read_or_nullify,\n};\nuse crate::oracle;\nuse crate::types::vec::BoundedVec;\n\nfn check_note_header<Note, N>(context: PrivateContext, storage_slot: Field, note_interface: NoteInterface<Note, N>, note: Note) {\n    let get_header = note_interface.get_header;\n    let header = get_header(note);\n    let contract_address = context.this_address();\n    assert(header.contract_address == contract_address);\n    assert(header.storage_slot == storage_slot);\n}\n\nfn check_note_fields<N>(fields: [Field; N], selects: BoundedVec<Option<Select>, N>) {\n    for i in 0..selects.len {\n        let select = selects.get_unchecked(i).unwrap_unchecked();\n        assert(fields[select.field_index] == select.value, \"Mismatch return note field.\");\n    }\n}\n\nfn check_notes_order<N>(fields_0: [Field; N], fields_1: [Field; N], sorts: BoundedVec<Option<Sort>, N>) {\n    for i in 0..sorts.len {\n        let sort = sorts.get_unchecked(i).unwrap_unchecked();\n        let eq = fields_0[sort.field_index] == fields_1[sort.field_index];\n        let lt = fields_0[sort.field_index] as u120 < fields_1[sort.field_index] as u120;\n        if sort.order == SortOrder.ASC {\n            assert(eq | lt, \"Return notes not sorted in ascending order.\");\n        } else if !eq {\n            assert(!lt, \"Return notes not sorted in descending order.\");\n        }\n    }\n}\n\npub fn get_note<Note, N>(context: &mut PrivateContext, storage_slot: Field, note_interface: NoteInterface<Note, N>) -> Note {\n    let note = get_note_internal(storage_slot, note_interface);\n\n    check_note_header(*context, storage_slot, note_interface, note);\n\n    let note_hash_for_read_request = compute_note_hash_for_read_or_nullify(note_interface, note);\n\n    context.push_read_request(note_hash_for_read_request);\n    note\n}\n\npub fn get_notes<Note, N, FILTER_ARGS>(\n    context: &mut PrivateContext,\n    storage_slot: Field,\n    note_interface: NoteInterface<Note, N>,\n    options: NoteGetterOptions<Note, N, FILTER_ARGS>\n) -> [Option<Note>; MAX_READ_REQUESTS_PER_CALL] {\n    let opt_notes = get_notes_internal(storage_slot, note_interface, options);\n    let mut num_notes = 0;\n    let mut prev_fields = [0; N];\n    for i in 0..opt_notes.len() {\n        let opt_note = opt_notes[i];\n        if opt_note.is_some() {\n            let note = opt_note.unwrap_unchecked();\n            let serialize = note_interface.serialize;\n            let fields = serialize(note);\n            check_note_header(*context, storage_slot, note_interface, note);\n            check_note_fields(fields, options.selects);\n            if i != 0 {\n                check_notes_order(prev_fields, fields, options.sorts);\n            }\n            prev_fields = fields;\n\n            let note_hash_for_read_request = compute_note_hash_for_read_or_nullify(note_interface, note);\n            // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1410): test to ensure\n            // failure if malicious oracle injects 0 nonce here for a \"pre-existing\" note.\n            context.push_read_request(note_hash_for_read_request);\n\n            num_notes += 1;\n        };\n    }\n    if options.limit != 0 {\n        assert(num_notes <= options.limit, \"Invalid number of return notes.\");\n    }\n    opt_notes\n}\n\nunconstrained fn get_note_internal<Note, N>(storage_slot: Field, note_interface: NoteInterface<Note, N>) -> Note {\n    let placeholder_note = [Option::none()];\n    let placeholder_fields = [0; GET_NOTE_ORACLE_RETURN_LENGTH];\n    oracle::notes::get_notes(storage_slot,\n        note_interface,\n        0,\n        [],\n        [],\n        [],\n        [],\n        1, // limit\n        0, // offset\n        placeholder_note,\n        placeholder_fields)[0].unwrap() // Notice: we don't allow dummies to be returned from get_note (singular).\n}\n\nunconstrained fn get_notes_internal<Note, N, FILTER_ARGS>(\n    storage_slot: Field,\n    note_interface: NoteInterface<Note, N>,\n    options: NoteGetterOptions<Note, N, FILTER_ARGS>\n) -> [Option<Note>; MAX_READ_REQUESTS_PER_CALL] {\n    let (num_selects, select_by, select_values, sort_by, sort_order) = flatten_options(options.selects, options.sorts);\n    let placeholder_opt_notes = [Option::none(); MAX_READ_REQUESTS_PER_CALL];\n    let placeholder_fields = [0; GET_NOTES_ORACLE_RETURN_LENGTH];\n    let opt_notes = oracle::notes::get_notes(storage_slot,\n        note_interface,\n        num_selects,\n        select_by,\n        select_values,\n        sort_by,\n        sort_order,\n        options.limit,\n        options.offset,\n        placeholder_opt_notes,\n        placeholder_fields);\n\n    let filter = options.filter;\n    let filter_args = options.filter_args;\n    filter(opt_notes, filter_args)\n}\n\nunconstrained pub fn view_notes<Note, N>(storage_slot: Field, note_interface: NoteInterface<Note, N>, options: NoteViewerOptions<Note, N>) -> [Option<Note>; MAX_NOTES_PER_PAGE] {\n    let (num_selects, select_by, select_values, sort_by, sort_order) = flatten_options(options.selects, options.sorts);\n    let placeholder_opt_notes = [Option::none(); MAX_NOTES_PER_PAGE];\n    let placeholder_fields = [0; VIEW_NOTE_ORACLE_RETURN_LENGTH];\n    oracle::notes::get_notes(storage_slot,\n        note_interface,\n        num_selects,\n        select_by,\n        select_values,\n        sort_by,\n        sort_order,\n        options.limit,\n        options.offset,\n        placeholder_opt_notes,\n        placeholder_fields)\n}\n\nunconstrained fn flatten_options<Note, N>(selects: BoundedVec<Option<Select>, N>, sorts: BoundedVec<Option<Sort>, N>) -> (u8, [u8; N], [Field; N], [u8; N], [u2; N]) {\n    let mut num_selects = 0;\n    let mut select_by = [0; N];\n    let mut select_values = [0; N];\n    for i in 0..selects.len {\n        let select = selects.get(i);\n        if select.is_some() {\n            select_by[num_selects] = select.unwrap_unchecked().field_index;\n            select_values[num_selects] = select.unwrap_unchecked().value;\n            num_selects += 1;\n        };\n    }\n\n    let mut sort_by = [0; N];\n    let mut sort_order = [0; N];\n    for i in 0..sorts.len {\n        let sort = sorts.get(i);\n        if sort.is_some() {\n            sort_by[i] = sort.unwrap_unchecked().field_index;\n            sort_order[i] = sort.unwrap_unchecked().order;\n        };\n    }\n\n    (num_selects, select_by, select_values, sort_by, sort_order)\n}\n",
        "path": "/aztec/note/note_getter.nr"
      },
      "111": {
        "source": "use crate::hash::pedersen_hash;\nuse dep::protocol_types::constants::{GENERATOR_INDEX__UNIQUE_COMMITMENT, GENERATOR_INDEX__SILOED_COMMITMENT};\n\npub fn compute_inner_hash(storage_slot: Field, note_hash: Field) -> Field {\n    // TODO(#1205) Do we need a generator index here?\n    pedersen_hash([storage_slot, note_hash], 0)\n}\n\npub fn compute_siloed_hash(contract_address: Field, inner_note_hash: Field) -> Field {\n    let inputs = [contract_address, inner_note_hash];\n    pedersen_hash(inputs, GENERATOR_INDEX__SILOED_COMMITMENT)\n}\n\npub fn compute_unique_hash(nonce: Field, siloed_note_hash: Field) -> Field {\n    let inputs = [nonce, siloed_note_hash];\n    pedersen_hash(inputs, GENERATOR_INDEX__UNIQUE_COMMITMENT)\n}\n",
        "path": "/aztec/note/note_hash.nr"
      },
      "115": {
        "source": "use dep::protocol_types::constants::GENERATOR_INDEX__OUTER_NULLIFIER;\nuse crate::{\n    note::{\n        note_hash::{compute_inner_hash, compute_siloed_hash, compute_unique_hash},\n        note_header::NoteHeader,\n        note_interface::NoteInterface,\n    },\n    utils::arr_copy_slice,\n    hash::pedersen_hash,\n};\n\npub fn compute_inner_note_hash<Note, N>(note_interface: NoteInterface<Note, N>, note: Note) -> Field {\n    let get_header = note_interface.get_header;\n    let header = get_header(note);\n\n    let compute_note_hash = note_interface.compute_note_hash;\n    let note_hash = compute_note_hash(note);\n\n    compute_inner_hash(header.storage_slot, note_hash)\n}\n\npub fn compute_siloed_note_hash<Note, N>(note_interface: NoteInterface<Note, N>, note_with_header: Note) -> Field {\n    let get_header = note_interface.get_header;\n    let header = get_header(note_with_header);\n\n    let inner_note_hash = compute_inner_note_hash(note_interface, note_with_header);\n\n    compute_siloed_hash(header.contract_address, inner_note_hash)\n}\n\npub fn compute_unique_siloed_note_hash<Note, N>(note_interface: NoteInterface<Note, N>, note_with_header: Note) -> Field {\n    let get_header = note_interface.get_header;\n    let header = get_header(note_with_header);\n\n    let siloed_note_hash = compute_siloed_note_hash(note_interface, note_with_header);\n\n    compute_unique_hash(header.nonce, siloed_note_hash)\n}\n\npub fn compute_siloed_nullifier<Note, N>(note_interface: NoteInterface<Note, N>, note_with_header: Note) -> Field {\n    let get_header = note_interface.get_header;\n    let header = get_header(note_with_header);\n\n    let compute_nullifier = note_interface.compute_nullifier;\n    let inner_nullifier = compute_nullifier(note_with_header);\n\n    let input = [header.contract_address, inner_nullifier];\n    pedersen_hash(input, GENERATOR_INDEX__OUTER_NULLIFIER)\n}\n\npub fn compute_note_hash_for_read_or_nullify<Note, N>(note_interface: NoteInterface<Note, N>, note_with_header: Note) -> Field {\n    let get_header = note_interface.get_header;\n    let header = get_header(note_with_header);\n\n    // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1386)\n    if (header.is_transient) {\n        // If a note is transient, we just read the inner_note_hash (kernel will silo by contract address).\n        compute_inner_note_hash(note_interface, note_with_header)\n    } else if (header.nonce == 0) {\n        // If not transient and nonce is zero, that means we are reading a public note.\n        compute_siloed_note_hash(note_interface, note_with_header)\n    } else {\n        // When nonce is nonzero, that means we are reading a settled note (from tree) created in a\n        // previous TX. So we need the unique_siloed_note_hash which has already been hashed with\n        // contract address and then nonce. This hash will match the existing leaf in the private\n        // data tree, so the kernel can just perform a membership check directly on this hash/leaf.\n        compute_unique_siloed_note_hash(note_interface, note_with_header)\n    }\n}\n\npub fn compute_note_hash_and_nullifier<Note, N, S>(note_interface: NoteInterface<Note, N>, note_header: NoteHeader, serialized_note: [Field; S]) -> [Field; 4] {\n    let deserialize = note_interface.deserialize;\n    let set_header = note_interface.set_header;\n    let mut note = deserialize(arr_copy_slice(serialized_note, [0; N], 0));\n    set_header(&mut note, note_header);\n\n    let compute_note_hash = note_interface.compute_note_hash;\n    let note_hash = compute_note_hash(note);\n    let inner_note_hash = compute_inner_hash(note_header.storage_slot, note_hash);\n\n    let siloed_note_hash = compute_siloed_hash(note_header.contract_address, inner_note_hash);\n\n    let unique_siloed_note_hash = compute_unique_hash(note_header.nonce, siloed_note_hash);\n\n    let compute_nullifier = note_interface.compute_nullifier;\n    let inner_nullifier = compute_nullifier(note);\n\n    [inner_note_hash, siloed_note_hash, unique_siloed_note_hash, inner_nullifier]\n}\n",
        "path": "/aztec/note/utils.nr"
      },
      "118": {
        "source": "use dep::protocol_types::constants::CALL_PRIVATE_FUNCTION_RETURN_SIZE;\n\n#[oracle(callPrivateFunction)]\nfn call_private_function_oracle(_contract_address: Field, _function_selector: Field, _args_hash: Field) -> [Field; CALL_PRIVATE_FUNCTION_RETURN_SIZE] {}\n\nunconstrained pub fn call_private_function_internal(contract_address: Field, function_selector: Field, args_hash: Field) -> [Field; CALL_PRIVATE_FUNCTION_RETURN_SIZE] {\n    call_private_function_oracle(contract_address, function_selector, args_hash)\n}\n",
        "path": "/aztec/oracle/call_private_function.nr"
      },
      "124": {
        "source": "use crate::types::point::Point;\nuse crate::address::compute_address;\n\n#[oracle(getPublicKeyAndPartialAddress)]\nfn get_public_key_and_partial_address_oracle(_address: Field) -> [Field; 3] {}\n\nunconstrained fn get_public_key_and_partial_address_internal(address: Field) -> [Field; 3] {\n    get_public_key_and_partial_address_oracle(address)\n}\n\npub fn get_public_key(address: Field) -> Point {\n    let result = get_public_key_and_partial_address_internal(address);\n    let pub_key_x = result[0];\n    let pub_key_y = result[1];\n    let partial_address = result[2];\n\n    let calculated_address = compute_address(pub_key_x, pub_key_y, partial_address);\n    assert(calculated_address == address);\n\n    Point::new(pub_key_x, pub_key_y)\n}\n",
        "path": "/aztec/oracle/get_public_key.nr"
      },
      "125": {
        "source": "use crate::oracle::get_public_key::get_public_key;\nuse crate::types::point::Point;\n\n#[oracle(getSecretKey)]\nfn get_secret_key_oracle(_owner: Point) -> [Field; dep::std::grumpkin_scalar::GRUMPKIN_SCALAR_SERIALIZED_LEN] {}\n\nunconstrained fn get_secret_key_internal(owner_public_key: Point) -> dep::std::grumpkin_scalar::GrumpkinScalar {\n    dep::std::grumpkin_scalar::deserialize_grumpkin_scalar(get_secret_key_oracle(owner_public_key))\n}\n\npub fn get_secret_key(owner: Field) -> dep::std::grumpkin_scalar::GrumpkinScalar {\n    let owner_public_key = get_public_key(owner);\n    let secret = get_secret_key_internal(owner_public_key);\n\n    // Constrain the owner - Nullifier secret key is currently just the encryption private key so we can constrain\n    // the owner by deriving the public key from the secret key and checking the result.\n    let computed_public_key = dep::std::grumpkin_scalar_mul::grumpkin_fixed_base(secret);\n    assert(owner_public_key.x == computed_public_key[0]);\n    assert(owner_public_key.y == computed_public_key[1]);\n\n    secret\n}\n",
        "path": "/aztec/oracle/get_secret_key.nr"
      },
      "128": {
        "source": "\n// contract_address + \n// args_hash +\n// crate::abi::FUNCTION_DATA_SIZE +\n// crate::abi::CALL_CONTEXT_SIZE +\n// = 2 + 4 + 7\nglobal ENQUEUE_PUBLIC_FUNCTION_CALL_RETURN_SIZE: Field = 13;\n\n#[oracle(enqueuePublicFunctionCall)]\nfn enqueue_public_function_call_oracle(_contract_address: Field, _function_selector: Field, _args_hash: Field) -> [Field; ENQUEUE_PUBLIC_FUNCTION_CALL_RETURN_SIZE] {}\n\nunconstrained pub fn enqueue_public_function_call_internal(contract_address: Field, function_selector: Field, args_hash: Field) -> [Field; ENQUEUE_PUBLIC_FUNCTION_CALL_RETURN_SIZE] {\n    enqueue_public_function_call_oracle(contract_address, function_selector, args_hash)\n}\n",
        "path": "/aztec/oracle/enqueue_public_function_call.nr"
      },
      "131": {
        "source": "use dep::std::option::Option;\nuse crate::note::{\n    note_header::NoteHeader,\n    note_interface::NoteInterface,\n};\nuse crate::utils::arr_copy_slice;\n\n#[oracle(notifyCreatedNote)]\nfn notify_created_note_oracle<N>(_storage_slot: Field, _serialized_note: [Field; N], _inner_note_hash: Field) -> Field {}\n\nunconstrained pub fn notify_created_note<N>(storage_slot: Field, serialized_note: [Field; N], inner_note_hash: Field) -> Field {\n    notify_created_note_oracle(storage_slot, serialized_note, inner_note_hash)\n}\n\n#[oracle(notifyNullifiedNote)]\nfn notify_nullified_note_oracle<N>(_nullifier: Field, _inner_note_hash: Field) -> Field {}\n\nunconstrained pub fn notify_nullified_note<N>(nullifier: Field, inner_note_hash: Field) -> Field {\n    notify_nullified_note_oracle(nullifier, inner_note_hash)\n}\n\n#[oracle(getNotes)]\nfn get_notes_oracle<N, S>(\n    _storage_slot: Field,\n    _num_selects: u8,\n    _select_by: [u8; N],\n    _select_values: [Field; N],\n    _sort_by: [u8; N],\n    _sort_order: [u2; N],\n    _limit: u32,\n    _offset: u32,\n    _return_size: u32,\n    _placeholder_fields: [Field; S]\n) -> [Field; S] {}\n\nunconstrained fn get_notes_oracle_wrapper<N, S>(\n    storage_slot: Field,\n    num_selects: u8,\n    select_by: [u8; N],\n    select_values: [Field; N],\n    sort_by: [u8; N],\n    sort_order: [u2; N],\n    limit: u32,\n    offset: u32,\n    mut placeholder_fields: [Field; S]\n) -> [Field; S] {\n    let return_size = placeholder_fields.len() as u32;\n    get_notes_oracle(storage_slot,\n        num_selects,\n        select_by,\n        select_values,\n        sort_by,\n        sort_order,\n        limit,\n        offset,\n        return_size,\n        placeholder_fields)\n}\n\nunconstrained pub fn get_notes<Note, N, M, S, NS>(\n    storage_slot: Field,\n    note_interface: NoteInterface<Note, N>,\n    num_selects: u8,\n    select_by: [u8; M],\n    select_values: [Field; M],\n    sort_by: [u8; M],\n    sort_order: [u2; M],\n    limit: u32,\n    offset: u32,\n    mut placeholder_opt_notes: [Option<Note>; S], // TODO: Remove it and use `limit` to initialize the note array.\n    placeholder_fields: [Field; NS] // TODO: Remove it and use `limit` to initialize the note array.\n) -> [Option<Note>; S] {\n    let fields = get_notes_oracle_wrapper(storage_slot,\n        num_selects,\n        select_by,\n        select_values,\n        sort_by,\n        sort_order,\n        limit,\n        offset,\n        placeholder_fields);\n    let num_notes = fields[0] as u32;\n    let contract_address = fields[1];\n    let deserialize = note_interface.deserialize;\n    let set_header = note_interface.set_header;\n    for i in 0..placeholder_opt_notes.len() {\n        if i as u32 < num_notes {\n            // lengths named as per typescript.\n            let return_header_length: Field = 2; // num_notes & contract_address.\n            let extra_preimage_length: Field = 2; // nonce & is_transient.\n            let read_offset: Field = return_header_length + i * (N + extra_preimage_length);\n            let nonce = fields[read_offset];\n            let is_transient = fields[read_offset + 1] as bool;\n            let header = NoteHeader { contract_address, nonce, storage_slot, is_transient };\n            let serialized_note = arr_copy_slice(fields, [0; N], read_offset + 2);\n            let mut note = deserialize(serialized_note);\n            set_header(&mut note, header);\n            placeholder_opt_notes[i] = Option::some(note);\n        };\n    }\n    placeholder_opt_notes\n}\n\n#[oracle(checkNullifierExists)]\nfn check_nullifier_exists_oracle(_inner_nullifier: Field) -> Field {}\n\nunconstrained pub fn check_nullifier_exists(inner_nullifier: Field) -> bool {\n    check_nullifier_exists_oracle(inner_nullifier) == 1\n}\n",
        "path": "/aztec/oracle/notes.nr"
      },
      "132": {
        "source": "#[oracle(storageRead)]\nfn storage_read_oracle<N>(_storage_slot: Field, _number_of_elements: Field) -> [Field; N] {}\n\nunconstrained fn storage_read_oracle_wrapper<N>(_storage_slot: Field) -> [Field; N] {\n    storage_read_oracle(_storage_slot, N)\n}\n\npub fn storage_read<T, N>(storage_slot: Field, deserialize: fn ([Field; N]) -> T) -> T {\n    let fields = storage_read_oracle_wrapper(storage_slot);\n    deserialize(fields)\n}\n\n#[oracle(storageWrite)]\nfn storage_write_oracle<N>(_storage_slot: Field, _values: [Field; N]) -> [Field; N] {}\n\n// TODO: Remove return value.\nunconstrained pub fn storage_write<N>(storage_slot: Field, fields: [Field; N]) {\n    let _hash = storage_write_oracle(storage_slot, fields);\n}\n",
        "path": "/aztec/oracle/storage.nr"
      },
      "133": {
        "source": "use crate::types::point::Point;\nuse dep::protocol_types::constants::NUM_FIELDS_PER_SHA256;\n\n// TODO: Should take encrypted data.\n#[oracle(emitEncryptedLog)]\nfn emit_encrypted_log_oracle<N>(_contract_address: Field, _storage_slot: Field, _encryption_pub_key: Point, _preimage: [Field; N]) -> Field {}\n\nunconstrained pub fn emit_encrypted_log<N>(contract_address: Field, storage_slot: Field, encryption_pub_key: Point, preimage: [Field; N]) -> [Field; NUM_FIELDS_PER_SHA256] {\n    [emit_encrypted_log_oracle(contract_address, storage_slot, encryption_pub_key, preimage), 0]\n}\n\n#[oracle(emitUnencryptedLog)]\nfn emit_unencrypted_log_oracle<T>(_contract_address: Field, _event_selector: Field, _message: T) -> Field {}\n\nunconstrained pub fn emit_unencrypted_log<T>(contract_address: Field, event_selector: Field, message: T) -> [Field; NUM_FIELDS_PER_SHA256] {\n    // https://github.com/AztecProtocol/aztec-packages/issues/885\n    [emit_unencrypted_log_oracle(contract_address, event_selector, message), 0]\n}\n",
        "path": "/aztec/oracle/logs.nr"
      },
      "134": {
        "source": "use crate::abi::FunctionData;\nuse crate::abi::PrivateCircuitPublicInputs;\nuse dep::protocol_types::constants::GENERATOR_INDEX__CALL_STACK_ITEM;\nuse crate::hash::pedersen_hash;\n\nstruct PrivateCallStackItem {\n    contract_address: Field,\n    function_data: FunctionData,\n    public_inputs: PrivateCircuitPublicInputs,\n    is_execution_request: bool,\n}\n\nimpl PrivateCallStackItem {\n    pub fn hash(self) -> Field {\n        pedersen_hash([\n            self.contract_address,\n            self.function_data.hash(),\n            self.public_inputs.hash(),\n        ], GENERATOR_INDEX__CALL_STACK_ITEM)\n    }\n}\n",
        "path": "/aztec/private_call_stack_item.nr"
      },
      "135": {
        "source": "use crate::{\n    abi,\n    hash::pedersen_hash,\n    abi::{\n        PublicCircuitPublicInputs,\n        FunctionData,\n    },\n};\nuse dep::protocol_types::constants::{\n    RETURN_VALUES_LENGTH,\n    GENERATOR_INDEX__CALL_STACK_ITEM,\n};\n\n// oracles\nuse crate::oracle::{\n    enqueue_public_function_call::enqueue_public_function_call_internal,\n};\n\nstruct PublicCallStackItem {\n    contract_address: Field,\n    function_data: FunctionData,\n    public_inputs: PublicCircuitPublicInputs,\n    is_execution_request: bool,\n}\n\nimpl PublicCallStackItem {\n    pub fn hash(self) -> Field {\n        pedersen_hash([\n            self.contract_address,\n            self.function_data.hash(),\n            self.public_inputs.hash(),\n        ], GENERATOR_INDEX__CALL_STACK_ITEM)\n    }\n}\n\n",
        "path": "/aztec/public_call_stack_item.nr"
      },
      "138": {
        "source": "use dep::std::option::Option;\nuse dep::protocol_types::constants::EMPTY_NULLIFIED_COMMITMENT;\nuse crate::context::{PrivateContext, Context};\nuse crate::note::{\n    lifecycle::create_note,\n    note_getter::{get_note, view_notes},\n    note_interface::NoteInterface,\n    note_viewer_options::NoteViewerOptions,\n};\nuse crate::oracle::notes::check_nullifier_exists;\nuse crate::state_vars::singleton::compute_singleton_initialization_nullifier;\n\n// docs:start:struct\nstruct ImmutableSingleton<Note, N> {\n    context: Option<&mut PrivateContext>,\n    storage_slot: Field,\n    note_interface: NoteInterface<Note, N>,\n    compute_initialization_nullifier: fn (Field, Option<Field>) -> Field,\n}\n// docs:end:struct\n\nimpl<Note, N> ImmutableSingleton<Note, N> {\n    // docs:start:new\n    pub fn new(\n        context: Context,\n        storage_slot: Field,\n        note_interface: NoteInterface<Note, N>,\n    ) -> Self {\n        assert(storage_slot != 0, \"Storage slot 0 not allowed. Storage slots must start from 1.\");\n        ImmutableSingleton {\n            context: context.private,\n            storage_slot,\n            note_interface,\n            compute_initialization_nullifier: compute_singleton_initialization_nullifier,\n        }\n    }\n    // docs:end:new\n\n    // docs:start:is_initialized\n    unconstrained pub fn is_initialized(self, owner: Option<Field>) -> bool {\n        let compute_initialization_nullifier = self.compute_initialization_nullifier;\n        let nullifier = compute_initialization_nullifier(self.storage_slot, owner);\n        check_nullifier_exists(nullifier)\n    }\n    // docs:end:is_initialized\n\n    // docs:start:initialize\n    pub fn initialize(\n        self,\n        note: &mut Note, \n        owner: Option<Field>,\n        broadcast: bool,\n    ) {\n        let context = self.context.unwrap();\n\n        // Nullify the storage slot.\n        let compute_initialization_nullifier = self.compute_initialization_nullifier;\n        let nullifier = compute_initialization_nullifier(self.storage_slot, owner);\n        context.push_new_nullifier(nullifier, EMPTY_NULLIFIED_COMMITMENT);\n\n        create_note(\n            context,\n            self.storage_slot,\n            note,\n            self.note_interface,\n            broadcast,\n        );\n    }\n    // docs:end:initialize\n\n    // docs:start:get_note\n    pub fn get_note(self) -> Note {\n        let context = self.context.unwrap();\n        let storage_slot = self.storage_slot;\n        get_note(context, storage_slot, self.note_interface)\n    }\n    // docs:end:get_note\n\n    // docs:start:view_note\n    unconstrained pub fn view_note(self) -> Note {\n        let options = NoteViewerOptions::new().set_limit(1);\n        view_notes(self.storage_slot, self.note_interface, options)[0].unwrap()\n    }\n    // docs:end:view_note\n}\n",
        "path": "/aztec/state_vars/immutable_singleton.nr"
      },
      "139": {
        "source": "use crate::context::{PrivateContext, PublicContext, Context};\nuse dep::std::option::Option;\nuse crate::hash::pedersen_hash;\n\n// docs:start:map\nstruct Map<V> {\n    context: Context,\n    storage_slot: Field,\n    state_var_constructor: fn(Context, Field) -> V,\n}\n// docs:end:map\n\nimpl<V> Map<V> {\n    // docs:start:new\n    pub fn new(\n        context: Context,\n        storage_slot: Field,\n        state_var_constructor: fn(Context, Field) -> V,\n    ) -> Map<V> {\n        assert(storage_slot != 0, \"Storage slot 0 not allowed. Storage slots must start from 1.\");\n        Map {\n            context,\n            storage_slot,\n            state_var_constructor,\n        }\n    }\n    // docs:end:new\n\n    // docs:start:at\n    pub fn at(self, key: Field) -> V {\n        // TODO(#1204): use a generator index for the storage slot\n        let derived_storage_slot = pedersen_hash([self.storage_slot, key],0);\n\n        let state_var_constructor = self.state_var_constructor;\n        state_var_constructor(self.context, derived_storage_slot)\n    }\n    // docs:end:at\n}\n",
        "path": "/aztec/state_vars/map.nr"
      },
      "140": {
        "source": "use crate::context::{Context};\nuse crate::oracle::storage::storage_read;\nuse crate::oracle::storage::storage_write;\nuse crate::types::type_serialization::TypeSerializationInterface;\nuse dep::std::option::Option;\n\n// docs:start:public_state_struct\nstruct PublicState<T, T_SERIALIZED_LEN> {\n    context: Context,\n    storage_slot: Field,\n    serialization_methods: TypeSerializationInterface<T, T_SERIALIZED_LEN>,\n}\n// docs:end:public_state_struct\n\nimpl<T, T_SERIALIZED_LEN> PublicState<T, T_SERIALIZED_LEN> {\n    // docs:start:public_state_struct_new\n    pub fn new(\n        // Note: Passing the contexts to new(...) just to have an interface compatible with a Map.\n        context: Context,\n        storage_slot: Field,\n        serialization_methods: TypeSerializationInterface<T, T_SERIALIZED_LEN>,\n    ) -> Self {\n        assert(storage_slot != 0, \"Storage slot 0 not allowed. Storage slots must start from 1.\");\n        PublicState {\n            context,\n            storage_slot,\n            serialization_methods,\n        }\n    }\n    // docs:end:public_state_struct_new\n\n    // docs:start:public_state_struct_read\n    pub fn read(self) -> T {\n        assert(self.context.private.is_none(), \"Public state writes only supported in public functions\");\n        storage_read(self.storage_slot, self.serialization_methods.deserialize)\n    }\n    // docs:end:public_state_struct_read\n\n    // docs:start:public_state_struct_write\n    pub fn write(self, value: T) {\n        assert(self.context.private.is_none(), \"Public state writes only supported in public functions\");\n        let serialize = self.serialization_methods.serialize;\n        let fields = serialize(value);\n        storage_write(self.storage_slot, fields);\n    }\n    // docs:end:public_state_struct_write\n}\n",
        "path": "/aztec/state_vars/public_state.nr"
      },
      "142": {
        "source": "use dep::std::option::Option;\nuse dep::protocol_types::constants::{EMPTY_NULLIFIED_COMMITMENT, GENERATOR_INDEX__INITIALIZATION_NULLIFIER};\nuse crate::context::{PrivateContext, PublicContext, Context};\nuse crate::note::{\n    lifecycle::{create_note, destroy_note},\n    note_getter::{get_note, view_notes},\n    note_interface::NoteInterface,\n    note_viewer_options::NoteViewerOptions,\n};\nuse crate::oracle::{\n    get_secret_key::get_secret_key,\n    notes::check_nullifier_exists,\n};\nuse crate::hash::pedersen_hash;\n\npub fn compute_singleton_initialization_nullifier(storage_slot: Field, owner: Option<Field>) -> Field {\n    if owner.is_some() {\n        let secret = get_secret_key(owner.unwrap_unchecked());\n        pedersen_hash([storage_slot, secret.low, secret.high],\n            GENERATOR_INDEX__INITIALIZATION_NULLIFIER)\n    } else {\n        pedersen_hash([storage_slot], GENERATOR_INDEX__INITIALIZATION_NULLIFIER)\n    }\n}\n\n// docs:start:struct\nstruct Singleton<Note, N> {\n    context: Option<&mut PrivateContext>,\n    storage_slot: Field,\n    note_interface: NoteInterface<Note, N>,\n    compute_initialization_nullifier: fn (Field, Option<Field>) -> Field,\n}\n// docs:end:struct\n\nimpl<Note, N> Singleton<Note, N> {\n    // docs:start:new\n    pub fn new(\n        context: Context,\n        storage_slot: Field,\n        note_interface: NoteInterface<Note, N>,\n    ) -> Self {\n        assert(storage_slot != 0, \"Storage slot 0 not allowed. Storage slots must start from 1.\");\n        Singleton {\n            context: context.private,\n            storage_slot,\n            note_interface,\n            compute_initialization_nullifier: compute_singleton_initialization_nullifier,\n        }\n    }\n    // docs:end:new\n\n    // docs:start:is_initialized\n    unconstrained pub fn is_initialized(self, owner: Option<Field>) -> bool {\n        let compute_initialization_nullifier = self.compute_initialization_nullifier;\n        let nullifier = compute_initialization_nullifier(self.storage_slot, owner);\n        check_nullifier_exists(nullifier)\n    }\n    // docs:end:is_initialized\n\n    // docs:start:initialize\n    pub fn initialize(\n        self,\n        note: &mut Note,\n        owner: Option<Field>,\n        broadcast: bool,\n    ) {\n        let context = self.context.unwrap();\n\n        // Nullify the storage slot.\n        let compute_initialization_nullifier = self.compute_initialization_nullifier;\n        let nullifier = compute_initialization_nullifier(self.storage_slot, owner);\n        context.push_new_nullifier(nullifier, EMPTY_NULLIFIED_COMMITMENT);\n\n        create_note(context, self.storage_slot, note, self.note_interface, broadcast);\n    }\n    // docs:end:initialize\n\n    // docs:start:replace\n    pub fn replace(\n        self,\n        new_note: &mut Note,\n        broadcast: bool,\n    ) {\n        let context = self.context.unwrap();\n        let prev_note = get_note(context, self.storage_slot, self.note_interface);\n\n        // Nullify previous note.\n        destroy_note(context, prev_note, self.note_interface);\n\n        // Add replacement note.\n        create_note(context, self.storage_slot, new_note, self.note_interface, broadcast);\n    }\n    // docs:end:replace\n\n    // docs:start:get_note\n    pub fn get_note(self, broadcast: bool) -> Note {\n        let context = self.context.unwrap();\n        let mut note = get_note(context, self.storage_slot, self.note_interface);\n\n        // Nullify current note to make sure it's reading the latest note.\n        destroy_note(context, note, self.note_interface);\n\n        // Add the same note again.\n        // Because a nonce is added to every note in the kernel, its nullifier will be different.\n        create_note(context, self.storage_slot, &mut note, self.note_interface, broadcast);\n\n        note\n    }\n    // docs:end:get_note\n\n    // docs:start:view_note\n    unconstrained pub fn view_note(self) -> Note {\n        let options = NoteViewerOptions::new().set_limit(1);\n        view_notes(self.storage_slot, self.note_interface, options)[0].unwrap()\n    }\n    // docs:end:view_note\n}\n",
        "path": "/aztec/state_vars/singleton.nr"
      },
      "146": {
        "source": "struct BoundedVec<T, MaxLen> {\n    storage: [T; MaxLen],\n    len: Field,\n}\n\nimpl<T, MaxLen> BoundedVec<T, MaxLen> {\n    pub fn new(initial_value: T) -> Self {\n        BoundedVec { storage: [initial_value; MaxLen], len: 0 }\n    }\n\n    pub fn get(mut self: Self, index: Field) -> T {\n        assert(index as u64 < self.len as u64);\n        self.storage[index]\n    }\n\n    pub fn get_unchecked(mut self: Self, index: Field) -> T {\n        self.storage[index]\n    }\n\n    pub fn push(&mut self, elem: T) {\n        assert(self.len as u64 < MaxLen as u64);\n\n        self.storage[self.len] = elem;\n        self.len += 1;\n    }\n\n    pub fn push_array<Len>(&mut self, array: [T; Len]) {\n        let newLen = self.len + array.len();\n        assert(newLen as u64 <= MaxLen as u64);\n        for i in 0..array.len() {\n            self.storage[self.len + i] = array[i];\n        }\n        self.len = newLen;\n    }\n\n    pub fn pop(&mut self) -> T {\n        assert(self.len as u64 > 0);\n\n        let elem = self.storage[self.len - 1];\n        self.len -= 1;\n        elem\n    }\n\n    pub fn any<Env>(self, predicate: fn[Env](T) -> bool) -> bool {\n        let mut ret = false;\n        let mut exceeded_len = false;\n        for i in 0..MaxLen {\n            exceeded_len |= i == self.len;\n            if (!exceeded_len) {\n                ret |= predicate(self.storage[i]);\n            }\n        }\n        ret\n    }\n}\n\n#[test]\nfn test_vec_push_pop() {\n    let mut vec: BoundedVec<Field, 3> = BoundedVec::new(0);\n    assert(vec.len == 0);\n    vec.push(2);\n    assert(vec.len == 1);\n    vec.push(4);\n    assert(vec.len == 2);\n    vec.push(6);\n    assert(vec.len == 3);\n    let x = vec.pop();\n    assert(x == 6);\n    assert(vec.len == 2);\n    assert(vec.get(0) == 2);\n    assert(vec.get(1) == 4);\n}\n\n#[test]\nfn test_vec_push_array() {\n    let mut vec: BoundedVec<Field, 3> = BoundedVec::new(0);\n    vec.push_array([2, 4]);\n    assert(vec.len == 2);\n    assert(vec.get(0) == 2);\n    assert(vec.get(1) == 4);\n}\n\n#[test(should_fail)]\nfn test_vec_get_out_of_bound() {\n    let mut vec: BoundedVec<Field, 2> = BoundedVec::new(0);\n    vec.push_array([2, 4]);\n    let _x = vec.get(2);\n}\n\n#[test(should_fail)]\nfn test_vec_get_not_declared() {\n    let mut vec: BoundedVec<Field, 2> = BoundedVec::new(0);\n    vec.push_array([2]);\n    let _x = vec.get(1);\n}\n\n#[test(should_fail)]\nfn test_vec_get_uninitialized() {\n    let mut vec: BoundedVec<Field, 2> = BoundedVec::new(0);\n    let _x = vec.get(0);\n}\n\n#[test(should_fail)]\nfn test_vec_push_overflow() {\n    let mut vec: BoundedVec<Field, 1> = BoundedVec::new(0);\n    vec.push(1);\n    vec.push(2);\n}\n\n#[test]\nfn test_vec_any() {\n    let mut vec: BoundedVec<Field, 3> = BoundedVec::new(0);\n    vec.push_array([2, 4, 6]);\n    assert(vec.any(|v| v == 2) == true);\n    assert(vec.any(|v| v == 4) == true);\n    assert(vec.any(|v| v == 6) == true);\n    assert(vec.any(|v| v == 3) == false);\n}\n\n#[test]\nfn test_vec_any_not_default() {\n    let default_value = 1;\n    let mut vec: BoundedVec<Field, 3> = BoundedVec::new(default_value);\n    vec.push_array([2, 4]);\n    assert(vec.any(|v| v == default_value) == false);\n}\n",
        "path": "/aztec/types/vec.nr"
      },
      "148": {
        "source": "use crate::types::type_serialization::TypeSerializationInterface;\n\nglobal BOOL_SERIALIZED_LEN: Field = 1;\n\nfn deserializeBool(fields: [Field; BOOL_SERIALIZED_LEN]) -> bool {\n    fields[0] as bool\n}\n\nfn serializeBool(value: bool) -> [Field; BOOL_SERIALIZED_LEN] {\n    [value as Field]\n}\n\nglobal BoolSerializationMethods = TypeSerializationInterface {\n    deserialize: deserializeBool,\n    serialize: serializeBool,\n};\n",
        "path": "/aztec/types/type_serialization/bool_serialization.nr"
      },
      "152": {
        "source": "pub fn arr_copy_slice<T, N, M>(src: [T; N], mut dst: [T; M], offset: Field) -> [T; M] {\n    for i in 0..dst.len() {\n        dst[i] = src[i + offset];\n    }\n    dst\n}\n\npub fn field_from_bytes<N>(bytes: [u8; N], big_endian: bool) -> Field {\n    assert(bytes.len() as u32 < 32, \"field_from_bytes: N must be less than 32\");\n    let mut as_field = 0;\n    let mut offset = 1;\n    for i in 0..N {\n        let mut index = i;\n        if big_endian {\n            index = N - i - 1;\n        }\n        as_field += (bytes[index] as Field) * offset;\n        offset *= 256;\n    }\n\n    as_field\n}\n\n// TODO(#3470): Copied over from https://github.com/AztecProtocol/aztec-packages/blob/a07c4bd47313be6aa604a63f37857eb0136b41ba/yarn-project/noir-protocol-circuits/src/crates/rollup-lib/src/base/base_rollup_inputs.nr#L599\n// move to a shared place?\n\n// TODO to radix returns u8, so we cannot use bigger radixes. It'd be ideal to use a radix of the maximum range-constrained integer noir supports\npub fn full_field_less_than(lhs: Field, rhs: Field) -> bool {\n    dep::std::eddsa::lt_bytes32(lhs, rhs)\n}\n\npub fn full_field_greater_than(lhs: Field, rhs: Field) -> bool {\n    dep::std::eddsa::lt_bytes32(rhs, lhs)\n}",
        "path": "/aztec/utils.nr"
      },
      "153": {
        "source": "use dep::aztec::context::{PrivateContext, PublicContext, Context};\nuse dep::aztec::selector::compute_selector;\nuse dep::aztec::state_vars::{map::Map, public_state::PublicState};\nuse dep::aztec::types::type_serialization::bool_serialization::{BoolSerializationMethods,BOOL_SERIALIZED_LEN};\n\nuse crate::entrypoint::EntrypointPayload;\nuse crate::auth::IS_VALID_SELECTOR;\n\nstruct AccountActions {\n  context: Context,\n  is_valid_impl: fn(&mut PrivateContext, Field) -> bool,\n  approved_action: Map<PublicState<bool, BOOL_SERIALIZED_LEN>>,\n}\n\nimpl AccountActions {\n  pub fn init(context: Context, approved_action_storage_slot: Field, is_valid_impl: fn(&mut PrivateContext, Field) -> bool) -> Self {\n    AccountActions {\n      context: context,\n      is_valid_impl: is_valid_impl,\n      approved_action: Map::new(\n        context,\n        approved_action_storage_slot,\n        |context, slot| {\n          PublicState::new(context, slot, BoolSerializationMethods)\n        },\n      ),\n    }\n  }\n\n  pub fn private(context: &mut PrivateContext, approved_action_storage_slot: Field, is_valid_impl: fn(&mut PrivateContext, Field) -> bool) -> Self {\n    AccountActions::init(Context::private(context), approved_action_storage_slot, is_valid_impl)\n  }\n\n  pub fn public(context: &mut PublicContext, approved_action_storage_slot: Field, is_valid_impl: fn(&mut PrivateContext, Field) -> bool) -> Self {\n    AccountActions::init(Context::public(context), approved_action_storage_slot, is_valid_impl)\n  }\n  \n  // docs:start:entrypoint\n  pub fn entrypoint(self, payload: EntrypointPayload) {\n    let message_hash = payload.hash();\n    let valid_fn = self.is_valid_impl;\n    let private_context = self.context.private.unwrap();\n    assert(valid_fn(private_context, message_hash));\n    payload.execute_calls(private_context);\n  }\n  // docs:end:entrypoint\n\n  pub fn is_valid(self, message_hash: Field) -> Field {\n    let valid_fn = self.is_valid_impl;\n    if (valid_fn(self.context.private.unwrap(), message_hash)) {\n        IS_VALID_SELECTOR\n    } else {\n        0\n    }\n  }\n\n  pub fn is_valid_public(self, message_hash: Field) -> Field {\n    let value = self.approved_action.at(message_hash).read();\n    if (value){\n        IS_VALID_SELECTOR\n    } else {\n        0\n    }\n  }\n\n  pub fn internal_set_is_valid_storage(self, message_hash: Field, value: bool) {\n    self.approved_action.at(message_hash).write(value);\n  }\n}\n",
        "path": "/authwit/account.nr"
      },
      "154": {
        "source": "#[oracle(getAuthWitness)]\nfn get_auth_witness_oracle<N>(_message_hash: Field) -> [Field; N] {}\n\nunconstrained pub fn get_auth_witness<N>(message_hash: Field) -> [Field; N] {\n    get_auth_witness_oracle(message_hash)\n}\n",
        "path": "/authwit/auth_witness.nr"
      },
      "156": {
        "source": "use dep::aztec::abi;\nuse dep::aztec::types::vec::BoundedVec;\nuse dep::aztec::hash::pedersen_hash;\nuse dep::aztec::context::PrivateContext;\nuse dep::aztec::private_call_stack_item::PrivateCallStackItem;\nuse dep::aztec::public_call_stack_item::PublicCallStackItem;\nuse dep::protocol_types::constants::GENERATOR_INDEX__SIGNATURE_PAYLOAD;\n\nglobal ACCOUNT_MAX_CALLS: Field = 4;\n// 1 (ARGS_HASH) + 1 (FUNCTION_SELECTOR) + 1 (TARGET_ADDRESS) + 1 (IS_PUBLIC)\nglobal FUNCTION_CALL_SIZE: Field = 4;\n// 3 * 32 + 1\nglobal FUNCTION_CALL_SIZE_IN_BYTES: Field = 97;\n\nstruct FunctionCall {\n  args_hash: Field,\n  function_selector: Field,\n  target_address: Field,\n  is_public: bool,\n}\n\nimpl FunctionCall {\n  fn serialize(self) -> [Field; FUNCTION_CALL_SIZE] {\n    [self.args_hash, self.function_selector, self.target_address, self.is_public as Field]\n  }\n\n  fn to_be_bytes(self) -> [u8; FUNCTION_CALL_SIZE_IN_BYTES] {\n    let mut bytes: [u8; FUNCTION_CALL_SIZE_IN_BYTES] = [0; FUNCTION_CALL_SIZE_IN_BYTES];\n    let args_hash_bytes = self.args_hash.to_be_bytes(32);\n    for i in 0..32 { bytes[i] = args_hash_bytes[i]; }\n    let function_selector_bytes = self.function_selector.to_be_bytes(32);\n    for i in 0..32 { bytes[i + 32] = function_selector_bytes[i]; }\n    let target_address_bytes = self.target_address.to_be_bytes(32);\n    for i in 0..32 { bytes[i + 64] = target_address_bytes[i]; }\n    bytes[96] = self.is_public as u8;\n    bytes\n  }\n}\n\n// FUNCTION_CALL_SIZE * ACCOUNT_MAX_CALLS + 1\nglobal ENTRYPOINT_PAYLOAD_SIZE: Field = 17;\n// FUNCTION_CALL_SIZE_IN_BYTES * ACCOUNT_MAX_CALLS + 32\nglobal ENTRYPOINT_PAYLOAD_SIZE_IN_BYTES: Field = 420;\n\n// docs:start:entrypoint-struct\nstruct EntrypointPayload {\n  function_calls: [FunctionCall; ACCOUNT_MAX_CALLS],\n  nonce: Field,\n}\n// docs:end:entrypoint-struct\n\nimpl EntrypointPayload {\n  fn hash(self) -> Field {\n    pedersen_hash(\n      self.serialize(), \n      GENERATOR_INDEX__SIGNATURE_PAYLOAD\n    )\n  }\n\n  // Serializes the entrypoint struct\n  fn serialize(self) -> [Field; ENTRYPOINT_PAYLOAD_SIZE] {\n    let mut fields: BoundedVec<Field, ENTRYPOINT_PAYLOAD_SIZE> = BoundedVec::new(0); \n    for call in self.function_calls {\n      fields.push_array(call.serialize());\n    }\n    fields.push(self.nonce);\n    fields.storage\n  }\n\n  // Serializes the payload as an array of bytes. Useful for hashing with sha256.\n  fn to_be_bytes(self) -> [u8; ENTRYPOINT_PAYLOAD_SIZE_IN_BYTES] {\n    let mut bytes: [u8; ENTRYPOINT_PAYLOAD_SIZE_IN_BYTES] = [0; ENTRYPOINT_PAYLOAD_SIZE_IN_BYTES];\n\n    for i in 0..ACCOUNT_MAX_CALLS {\n      let item_bytes = self.function_calls[i].to_be_bytes();\n      for j in 0..FUNCTION_CALL_SIZE_IN_BYTES { \n        bytes[i * FUNCTION_CALL_SIZE_IN_BYTES + j] = item_bytes[j];\n      }\n    }\n\n    let nonce_bytes = self.nonce.to_be_bytes(32);\n    let nonce_offset = FUNCTION_CALL_SIZE_IN_BYTES * ACCOUNT_MAX_CALLS;\n    for j in 0..32 {\n      bytes[nonce_offset + j] = nonce_bytes[j];\n    }\n    \n    bytes\n  }\n\n  // Executes all private and public calls \n  // docs:start:entrypoint-execute-calls\n  fn execute_calls(self, context: &mut PrivateContext) {\n    for call in self.function_calls {\n      if call.target_address != 0 {\n        if call.is_public {\n          context.call_public_function_with_packed_args(\n            call.target_address, call.function_selector, call.args_hash\n          );\n        } else {\n          let _result = context.call_private_function_with_packed_args(\n            call.target_address, call.function_selector, call.args_hash\n          );\n        }\n      }\n    }\n  }\n  // docs:end:entrypoint-execute-calls\n}\n",
        "path": "/authwit/entrypoint.nr"
      },
      "157": {
        "source": "use dep::aztec::{\n    note::{\n        note_header::NoteHeader,\n        note_interface::NoteInterface,\n        utils::compute_unique_siloed_note_hash,\n    },\n    oracle::{\n        get_secret_key::get_secret_key,\n        get_public_key::get_public_key,\n    },\n    log::emit_encrypted_log,\n    hash::pedersen_hash,\n    context::PrivateContext,\n};\n\nglobal ECDSA_PUBLIC_KEY_NOTE_LEN: Field = 5;\n\n// Stores an ECDSA public key composed of two 32-byte elements\n// TODO: Do we need to include a nonce, in case we want to read/nullify/recreate with the same pubkey value?\nstruct EcdsaPublicKeyNote {\n    x: [u8; 32],\n    y: [u8; 32],\n    owner: Field, // We store the owner address only to get the secret key to compute the nullifier\n    header: NoteHeader,\n}\n\nimpl EcdsaPublicKeyNote {\n    pub fn new(x: [u8; 32], y: [u8; 32], owner: Field) -> Self {\n        EcdsaPublicKeyNote {\n            x,\n            y,\n            owner,\n            header: NoteHeader::empty(),\n        }\n    }\n\n    // serialize the note as 5 fields where:\n    // [0] = x[0..31] (upper bound excluded)\n    // [1] = x[31]\n    // [2] = y[0..31]\n    // [3] = y[31]\n    // [4] = owner\n    pub fn serialize(self) -> [Field; ECDSA_PUBLIC_KEY_NOTE_LEN] {\n        let mut x: Field = 0;\n        let mut y: Field = 0;\n        let mut mul: Field = 1;\n\n        for i in 1..32 {\n          let byte_x: Field = self.x[31 - i] as Field;\n          x = x + (byte_x * mul);\n          let byte_y: Field = self.y[31 - i] as Field;\n          y = y + (byte_y * mul);\n          mul *= 256;\n        }\n\n        let last_x = self.x[31] as Field;\n        let last_y = self.y[31] as Field;\n        \n        let res: [Field; ECDSA_PUBLIC_KEY_NOTE_LEN] = [x, last_x, y, last_y, self.owner];\n        res\n    }\n\n    pub fn compute_nullifier(self) -> Field {\n        let unique_siloed_note_hash = compute_unique_siloed_note_hash(EcdsaPublicKeyNoteInterface, self);\n        let secret = get_secret_key(self.owner);\n        // TODO(#1205) Should use a non-zero generator index.\n        pedersen_hash([\n            unique_siloed_note_hash,\n            secret.low,\n            secret.high,\n        ],0)\n    }\n\n    pub fn set_header(&mut self, header: NoteHeader) {\n        self.header = header;\n    }\n\n    // Broadcasts the note as an encrypted log on L1.\n    pub fn broadcast(self, context: &mut PrivateContext, slot: Field) {\n        let encryption_pub_key = get_public_key(self.owner);\n        emit_encrypted_log(\n            context,\n            (*context).this_address(),\n            slot,\n            encryption_pub_key,\n            self.serialize(),\n        );\n    }\n}\n\nfn deserialize(serialized_note: [Field; ECDSA_PUBLIC_KEY_NOTE_LEN]) -> EcdsaPublicKeyNote {\n    let mut x: [u8; 32] = [0; 32];\n    let mut y: [u8; 32] = [0; 32];\n\n    let part_x = serialized_note[0].to_be_bytes(32);\n    for i in 0..31 {\n        x[i] = part_x[i + 1];\n    }\n    x[31] = serialized_note[1].to_be_bytes(32)[31];\n\n    let part_y = serialized_note[2].to_be_bytes(32);\n    for i in 0..31 {\n        y[i] = part_y[i + 1];\n    }\n    y[31] = serialized_note[3].to_be_bytes(32)[31];\n\n    EcdsaPublicKeyNote { x, y, owner: serialized_note[4], header: NoteHeader::empty() }\n}\n\nfn serialize(note: EcdsaPublicKeyNote) -> [Field; ECDSA_PUBLIC_KEY_NOTE_LEN] {\n    note.serialize()\n}\n\nfn compute_note_hash(note: EcdsaPublicKeyNote) -> Field {\n    // TODO(#1205) Should use a non-zero generator index.\n    pedersen_hash(note.serialize(), 0)\n}\n\nfn compute_nullifier(note: EcdsaPublicKeyNote) -> Field {\n    note.compute_nullifier()\n}\n\nfn get_header(note: EcdsaPublicKeyNote) -> NoteHeader {\n    note.header\n}\n\nfn set_header(note: &mut EcdsaPublicKeyNote, header: NoteHeader) {\n    note.set_header(header);\n}\n\n// Broadcasts the note as an encrypted log on L1.\nfn broadcast(context: &mut PrivateContext, slot: Field, note: EcdsaPublicKeyNote) {\n    note.broadcast(context, slot);\n}\n\nglobal EcdsaPublicKeyNoteInterface = NoteInterface {\n    deserialize,\n    serialize,\n    compute_note_hash,\n    compute_nullifier,\n    get_header,\n    set_header,\n    broadcast,\n};",
        "path": "/Users/jack-sw/Codes/istanbul/dogecoin-snap/packages/snap/contract/ecdsa_account/src/ecdsa_public_key_note.nr"
      }
    }
  }
}
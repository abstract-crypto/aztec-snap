diff --git a/node_modules/@aztec/circuits.js/dest/structs/revert_code.js b/node_modules/@aztec/circuits.js/dest/structs/revert_code.js
index 3c98db0..37c741b 100644
--- a/node_modules/@aztec/circuits.js/dest/structs/revert_code.js
+++ b/node_modules/@aztec/circuits.js/dest/structs/revert_code.js
@@ -3,64 +3,71 @@ import { BufferReader, FieldReader } from '@aztec/foundation/serialize';
 import { inspect } from 'util';
 var RevertCodeEnum;
 (function (RevertCodeEnum) {
-    RevertCodeEnum[RevertCodeEnum["OK"] = 0] = "OK";
-    RevertCodeEnum[RevertCodeEnum["REVERTED"] = 1] = "REVERTED";
+  RevertCodeEnum[(RevertCodeEnum['OK'] = 0)] = 'OK';
+  RevertCodeEnum[(RevertCodeEnum['REVERTED'] = 1)] = 'REVERTED';
 })(RevertCodeEnum || (RevertCodeEnum = {}));
 function isRevertCodeEnum(value) {
-    return value === RevertCodeEnum.OK || value === RevertCodeEnum.REVERTED;
+  return value === RevertCodeEnum.OK || value === RevertCodeEnum.REVERTED;
 }
 /**
  * Wrapper class over a field to safely represent a revert code.
  */
 export class RevertCode {
-    constructor(e) {
-        this.code = e.valueOf();
+  constructor(e) {
+    this.code = e.valueOf();
+  }
+  equals(other) {
+    return this.code === other.code;
+  }
+  isOK() {
+    return this.equals(RevertCode.OK);
+  }
+  toHashPreimage() {
+    const padding = Buffer.alloc(
+      RevertCode.PREIMAGE_SIZE_IN_BYTES - RevertCode.PACKED_SIZE_IN_BYTES,
+    );
+    return Buffer.concat([padding, this.toBuffer()]);
+  }
+  toBuffer() {
+    const b = Buffer.alloc(RevertCode.PACKED_SIZE_IN_BYTES);
+    b.writeUInt8(this.code, 0);
+    return b;
+  }
+  toField() {
+    return new Fr(this.toBuffer());
+  }
+  getSerializedLength() {
+    return this.toBuffer().length;
+  }
+  static fromField(fr) {
+    if (!isRevertCodeEnum(fr.toNumber())) {
+      throw new Error(`Invalid RevertCode: ${fr.toNumber()}`);
     }
-    equals(other) {
-        return this.code === other.code;
-    }
-    isOK() {
-        return this.equals(RevertCode.OK);
-    }
-    toHashPreimage() {
-        const padding = Buffer.alloc(RevertCode.PREIMAGE_SIZE_IN_BYTES - RevertCode.PACKED_SIZE_IN_BYTES);
-        return Buffer.concat([padding, this.toBuffer()]);
-    }
-    toBuffer() {
-        const b = Buffer.alloc(RevertCode.PACKED_SIZE_IN_BYTES);
-        b.writeUInt8(this.code, 0);
-        return b;
-    }
-    toField() {
-        return new Fr(this.toBuffer());
-    }
-    getSerializedLength() {
-        return this.toBuffer().length;
-    }
-    static fromField(fr) {
-        if (!isRevertCodeEnum(fr.toNumber())) {
-            throw new Error(`Invalid RevertCode: ${fr.toNumber()}`);
-        }
-        return new RevertCode(fr.toNumber());
-    }
-    static fromFields(fields) {
-        const reader = FieldReader.asReader(fields);
-        return RevertCode.fromField(reader.readField());
-    }
-    static fromBuffer(buffer) {
-        const reader = BufferReader.asReader(buffer);
-        const code = reader.readBytes(RevertCode.PACKED_SIZE_IN_BYTES).readUInt8(0);
-        if (!isRevertCodeEnum(code)) {
-            throw new Error(`Invalid RevertCode: ${code}`);
-        }
-        return new RevertCode(code);
-    }
-    static random() {
-        return new RevertCode(Math.floor(Math.random() * RevertCode.NUM_OPTIONS));
-    }
-    [inspect.custom]() {
-        return `RevertCode<${this.code.toString()}>`;
+    return new RevertCode(fr.toNumber());
+  }
+  static fromFields(fields) {
+    const reader = FieldReader.asReader(fields);
+    return RevertCode.fromField(reader.readField());
+  }
+  static fromBuffer(buffer) {
+    const reader = BufferReader.asReader(buffer);
+    const code = reader.readBytes(RevertCode.PACKED_SIZE_IN_BYTES).readUInt8(0);
+    if (!isRevertCodeEnum(code)) {
+      throw new Error(`Invalid RevertCode: ${code}`);
     }
+    return new RevertCode(code);
+  }
+  static random() {
+    // return new RevertCode(Math.floor(Math.random() * RevertCode.NUM_OPTIONS));
+    const array = new Uint32Array(1);
+    crypto.getRandomValues(array);
+    return new RevertCode(
+      Math.floor((array[0] / (0xffffffff + 1)) * RevertCode.NUM_OPTIONS),
+    );
+  }
+  [inspect.custom]() {
+    return `RevertCode<${this.code.toString()}>`;
+  }
 }
 RevertCode.OK = new RevertCode(RevertCodeEnum.OK);
 RevertCode.REVERTED = new RevertCode(RevertCodeEnum.REVERTED);
